<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chatomics on Chatomics</title>
    <link>/</link>
    <description>Recent content in Chatomics on Chatomics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Ming &#39;Tommy&#39; Tang</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Reproducible Computing in Bioinformatics: Lessons from My Latest Talk</title>
      <link>/post/repro-comp/</link>
      <pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>/post/repro-comp/</guid>
      <description>&lt;p&gt;Hey everyone, it’s Tommy here. If you’ve been following my blog or my Twitter/X (&lt;span class=&#34;citation&#34;&gt;@tangming2005&lt;/span&gt;), you know I love diving into the practical side of bioinformatics and genomics.&lt;/p&gt;
&lt;p&gt;Recently, I gave a talk titled &lt;a href=&#34;https://divingintogeneticsandgenomics.com/talk/2025-moderna-reproducible/&#34;&gt;“Good Enough Practices for Reproducible Computing”&lt;/a&gt; at Moderna, where I spent a good chunk of time chatting about reproducible computing.&lt;/p&gt;
&lt;p&gt;Why? Because in our field, where data is exploding and analyses get complex, making sure your work can be repeated—by you or anyone else—is a game-changer. I thought it’d be fun to turn those slides into a blog post here.&lt;/p&gt;
&lt;p&gt;In this post, I’ll focus on the reproducible computing part, sharing why it matters, why it’s tricky, and some simple tips to make it happen. I’ll keep it straightforward, like I do in my other posts—no fancy jargon without explanation. Let’s jump in!&lt;/p&gt;
&lt;div id=&#34;why-bother-with-reproducibility&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why Bother with Reproducibility?&lt;/h2&gt;
&lt;p&gt;First off, remember that story from Keith Baggerly at MD Anderson? He uncovered issues in high-throughput biology papers because methods weren’t clear or reproducible. Check out his hilarious YouTube talk on it: &lt;a href=&#34;https://www.youtube.com/watch?v=7gYIs7uYbMo&#34;&gt;The Importance of Reproducible Research in High-Throughput Biology&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Stuff like that shows how non-reproducible work can lead to wrong conclusions, wasted time, and even bad decisions in drug development—which can be super expensive.&lt;/p&gt;
&lt;p&gt;But here’s a personal angle: &lt;strong&gt;Your closest collaborator is yourself six months from now&lt;/strong&gt;. I’ve been there—digging up an old analysis and thinking, “What the heck did I do here?”&lt;/p&gt;
&lt;p&gt;If it’s not reproducible, you’re starting from scratch. And in biotech/pharama, where I’m now Director of Bioinformatics at AstraZeneca, we can’t afford that. Reproducibility saves time, builds trust, lets others build on your work and most importantly, it saves lives.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ccah.vetmed.ucdavis.edu/areas-study/genetics/titus-brown-lab&#34;&gt;Titus Brown&lt;/a&gt; summed it up nicely in one of his talks: Reproducibility isn’t just nice; it’s essential in computational biology.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-challenges-why-is-it-so-hard&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Challenges: Why Is It So Hard?&lt;/h2&gt;
&lt;p&gt;From my experience (and the gaps in my own career journey from wet lab to comp bio), here are the big hurdles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data and Scripts Go Missing&lt;/strong&gt;: Raw data isn’t versioned, or scripts are “available upon request” (yeah, right).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vague Methods&lt;/strong&gt;: Papers skip details on tools, versions, or even operating systems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Version Mismatches&lt;/strong&gt;: Different R/Python packages, bioinformatics tools, or OS (Mac vs. Linux vs. Windows) can change results.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Standards&lt;/strong&gt;: Everyone organizes projects differently, making collaboration a nightmare.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ve seen this in my over a decade long career in bioiinformatics. One mismatch, and poof—results don’t match.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-make-your-work-reproducible-practical-tips&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How to Make Your Work Reproducible: Practical Tips&lt;/h2&gt;
&lt;p&gt;The good news? You don’t need rocket science. Here’s what I covered in the talk—simple steps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Version Your Data and Files Smartly&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Version control large files with &lt;a href=&#34;https://git-lfs.com/&#34;&gt;git lfs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Name files like a pro: Use ISO 8601 dates (YYYY-MM-DD), no spaces or special chars, and add slugs for clarity. For example, “2025-08-17_reproducible-analysis_results.csv” beats “final_v2.csv”.&lt;/p&gt;
&lt;p&gt;Shoutout to Jenny Bryan for her awesome slides on this: &lt;a href=&#34;http://www2.stat.duke.edu/~rcs46/lectures_2015/01-markdown-git/slides/naming-slides/naming-slides.pdf&#34;&gt;Naming Things&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Organize projects consistently: Folders like /data (read-only), /scripts, /results. In R, use &lt;code&gt;here::here()&lt;/code&gt; for paths—avoids headaches. Python folks, check out &lt;a href=&#34;https://pypi.org/project/pyhere/&#34;&gt;pyhere&lt;/a&gt; on GitHub.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Git for Code Versioning&lt;/strong&gt;&lt;br /&gt;
Git is your best friend for tracking changes. I commit often and push daily. Basic commands: &lt;code&gt;git init&lt;/code&gt;, &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;, &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It saved me when inheriting projects at Immunitas Therapeutics (after people left). If you’re new, try &lt;a href=&#34;https://happygitwithr.com&#34;&gt;Happy Git with R&lt;/a&gt; or &lt;a href=&#34;https://learngitbranching.js.org&#34;&gt;Learn Git Branching&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pro tip: Use branches for experiments you might toss.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Manage Environments with Tools Like Conda, uv, or renv&lt;/strong&gt;&lt;br /&gt;
Pin package versions! For Python, I love mamba (faster Conda) or uv (super quick, check it out on GitHub: &lt;a href=&#34;https://github.com/astral-sh/uv&#34; class=&#34;uri&#34;&gt;https://github.com/astral-sh/uv&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In R, renv snapshots your library: &lt;code&gt;renv::init()&lt;/code&gt;, &lt;code&gt;renv::snapshot()&lt;/code&gt;. No more “It works on my machine” excuses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Containers for the Win: Docker or Singularity&lt;/strong&gt;&lt;br /&gt;
Think of Docker as a virtual machine that bundles everything—OS, packages, code. I’ve used it for ChIP-seq pipelines.
Resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://rocker-project.org&#34;&gt;Rocker Project&lt;/a&gt; for R in Docker,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://biocontainers.pro/&#34;&gt;BioContainers&lt;/a&gt; for bio tools.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.bioconductor.org/help/docker/&#34;&gt;Bioconductor container&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Literate Programming: Mix Code and Words&lt;/strong&gt;&lt;br /&gt;
Use Jupyter Notebooks for Python or R Markdown/Quarto for R. I will need to switch to Quarto—it’s next-gen R Markdown (&lt;a href=&#34;https://quarto.org&#34; class=&#34;uri&#34;&gt;https://quarto.org&lt;/a&gt;). Embed code chunks, explanations, and outputs.&lt;/p&gt;
&lt;p&gt;Bonus: Quarto is Git-friendly. Document outside too, like in my enhancer-promoter repo: &lt;a href=&#34;https://gitlab.com/tangming2005/Enhancer_promoter_interaction_data&#34; class=&#34;uri&#34;&gt;https://gitlab.com/tangming2005/Enhancer_promoter_interaction_data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Python users want to take a look at &lt;a href=&#34;https://marimo.io/&#34;&gt;marimo&lt;/a&gt; as a Jupyter alternative&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Automate Everything&lt;/strong&gt;&lt;br /&gt;
Scripts over manual tweaks! For repetitive tasks, bash scripts or workflows like Snakemake/Nextflow. In R, {targets} is gold (book: &lt;a href=&#34;https://books.ropensci.org/targets/&#34; class=&#34;uri&#34;&gt;https://books.ropensci.org/targets/&lt;/a&gt;).&lt;br /&gt;
Automation = best documentation. Computers love boring work; let them handle it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Clean Code with Functions&lt;/strong&gt;&lt;br /&gt;
Don’t repeat yourself—use functions. In R, purrr::map() for loops. I even ask ChatGPT to refactor messy code. For bigger stuff, build packages with roxygen2 (book: &lt;a href=&#34;https://r-pkgs.org&#34; class=&#34;uri&#34;&gt;https://r-pkgs.org&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Functional programming keeps things tidy and reusable.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;good-enough-practices-to-get-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Good Enough Practices to Get Started&lt;/h2&gt;
&lt;p&gt;You don’t need perfection. Start with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consistent folders.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Notebooks for analyses.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Extensive documentation.&lt;/li&gt;
&lt;li&gt;Git for versioning.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;A quick HTML report with knitr.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;End every project with a slide deck linking to your GitHub.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Over time, aim for the full spectrum: Reproduce your own work anytime, anywhere, and let others do the same.&lt;/p&gt;
&lt;div id=&#34;tools-that-are-useful&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Tools that are useful&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/vsbuffalo/scidataflow&#34;&gt;SciDataFlow&lt;/a&gt; — Facilitating the Flow of Data in Science. By Vince Buffalo, author of &lt;a href=&#34;https://www.amazon.com/Bioinformatics-Data-Skills-Reproducible-Research/dp/1449367372&#34;&gt;Bioinformatics data skills&lt;/a&gt; (one my favorite books).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2303.07876&#34;&gt;pracpac&lt;/a&gt;: Practical R Packaging with Docker. By &lt;a href=&#34;https://stephenturner.us/&#34;&gt;Stephen Turner&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.ropensci.org/rix/&#34;&gt;rix&lt;/a&gt;: Reproducible Environments with &lt;a href=&#34;https://nixos.org/&#34;&gt;Nix&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://handbook.datalad.org/en/latest/usecases/ml-analysis.html&#34;&gt;DataLad for reproducible machine-learning analyses&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/tycho-kirchner/shournal&#34;&gt;Shournal&lt;/a&gt; A (file-) journal for your shell.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I do not want to write down every linux commands in the terminal anymore. Check out &lt;a href=&#34;https://www.liminalbios.com/&#34;&gt;Shell Sync&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://vatlab.github.io/sos-docs/index.html&#34;&gt;Script of Scripts (SoS)&lt;/a&gt; is a computational environment for the development and execution of scripts in multiple languages for daily computational research. It can be used to develop scripts to analyze data interactively in a Jupyter environment, and, with minimal effort, convert the scripts to a workflow that analyzes a large amount of data in batch mode.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Boehringer-Ingelheim/dso&#34;&gt;DSO&lt;/a&gt;: is a command line helper for building reproducible data anlaysis projects with ease from Boehringer-Ingelheim.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Imagine being able to click on a plot and seeing the complete Jupyter/Rmd notebook, data, and parameters. That’s &lt;a href=&#34;https://www.gofigr.io/&#34;&gt;GoFigr&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;two-books-i-have-read&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Two books I have read&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://raps-with-r.dev/&#34;&gt;Building reproducible analytical pipelines with R&lt;/a&gt;. Highly recommend if you use R.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Software-Engineering-Data-Scientists-Notebooks/dp/1098136209&#34;&gt;Software Engineering for Data Scientists: From Notebooks to Scalable Systems&lt;/a&gt; if you use python. But the concepts are applicable no matter what language you use.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;wrapping-up&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;Reproducible computing transformed my career—from PhD at UF to leading teams now. It avoids errors, speeds things up, and makes you a better scientist.&lt;/p&gt;
&lt;p&gt;If you’re in bioinformatics, embrace it! Got questions? Hit me up on Twitter or in the comments below. And if you like this, subscribe to my newsletter for more tips: &lt;a href=&#34;https://divingintogeneticsandgenomics.ck.page/profile&#34; class=&#34;uri&#34;&gt;https://divingintogeneticsandgenomics.ck.page/profile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What do you think— what’s your biggest reproducibility headache? Let’s chat!&lt;/p&gt;
&lt;p&gt;(Oh, and if you’re into videos, check my YouTube channel &lt;a href=&#34;https://www.youtube.com/@chatomics&#34;&gt;Chatomics&lt;/a&gt; for related tutorials.)&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Crashing Excel to Curing Cancer: How AI and Open Science Transformed One Scientist’s Path</title>
      <link>/talk/2025-ai-on-the-hill-podcast/</link>
      <pubDate>Fri, 01 Aug 2025 12:00:00 +0000</pubDate>
      
      <guid>/talk/2025-ai-on-the-hill-podcast/</guid>
      <description>&lt;p&gt;We’re bringing a podcast to the conversation: AI on the Hill — and our very first episode is now live!&lt;/p&gt;

&lt;p&gt;In this show, host René Bastón sits down with 🎯 Ming &amp;ldquo;Tommy&amp;rdquo; Tang, a first-gen PhD who arrived in the U.S. with just $2,000 and a dream. Through grit, coding, and a passion for open science, he transformed his career — and became a voice for how AI is reshaping drug discovery.&lt;/p&gt;

&lt;p&gt;They talk about:&lt;/p&gt;

&lt;p&gt;✅ Breaking into coding as a scientist.&lt;/p&gt;

&lt;p&gt;✅ How AI and data are reshaping drug discovery.&lt;/p&gt;

&lt;p&gt;✅ The value of open science and reproducibility.&lt;/p&gt;

&lt;p&gt;✅ Turning struggle into momentum and leadership&lt;/p&gt;

&lt;p&gt;🎧 Crashing Excel to Curing Cancer: How AI and Open Science Transformed One Scientist’s Path&lt;/p&gt;

&lt;p&gt;listen it here &lt;a href=&#34;https://podcasts.apple.com/us/podcast/crashing-excel-to-curing-cancer-how-ai-and-open/id1830617772?i=1000720290820&#34; target=&#34;_blank&#34;&gt;https://podcasts.apple.com/us/podcast/crashing-excel-to-curing-cancer-how-ai-and-open/id1830617772?i=1000720290820&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/ai-hill-podcast.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Panel discussion: From Physics-Based Modeling to AI-driven Drug Discovery</title>
      <link>/talk/2025-atombeat-panel/</link>
      <pubDate>Fri, 18 Jul 2025 12:00:00 +0000</pubDate>
      
      <guid>/talk/2025-atombeat-panel/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/img/atombeat.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to create a GenomicRanges object in Bioconductor using canonical transcripts</title>
      <link>/post/canonical-tx/</link>
      <pubDate>Tue, 15 Jul 2025 00:00:00 +0000</pubDate>
      
      <guid>/post/canonical-tx/</guid>
      <description>&lt;p&gt;&lt;strong&gt;To not miss a post like this, sign up for my &lt;a href=&#34;https://divingintogeneticsandgenomics.ck.page/profile&#34;&gt;newsletter&lt;/a&gt; to learn computational
biology and bioinformatics.&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;introduction-to-annotation-data-packages-in-bioconductor&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction to Annotation Data Packages in Bioconductor&lt;/h2&gt;
&lt;p&gt;Accurate gene and transcript annotation is the foundation of many bioinformatics workflows, including RNA-seq analysis, functional genomics, and variant annotation.&lt;/p&gt;
&lt;p&gt;In the R/Bioconductor ecosystem, dedicated annotation data packages make it easy for researchers to access, query, and leverage gene models sourced from major biological databases.&lt;/p&gt;
&lt;p&gt;Understanding the origin and structure of these annotation packages—such as those based on &lt;a href=&#34;https://genome.ucsc.edu/&#34;&gt;UCSC&lt;/a&gt;, &lt;a href=&#34;https://useast.ensembl.org/index.html&#34;&gt;Ensembl&lt;/a&gt;, and other reference sets—is essential for reproducibility and clarity in your analyses.&lt;/p&gt;
&lt;div id=&#34;key-annotation-databases-and-their-packages&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Key Annotation Databases and Their Packages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TxDb.Hsapiens.UCSC.hg38.knownGene&lt;/strong&gt;&lt;br /&gt;
Built using gene models from the UCSC Genome Browser’s “knownGene” track for the human hg38 assembly. &lt;code&gt;UCSC&lt;/code&gt; integrates gene predictions from several sources, including RefSeq, GenBank, and Ensembl, but curates its own transcript IDs and structures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;EnsDb Data Packages&lt;/strong&gt;&lt;br /&gt;
Based on Ensembl, a comprehensive genome annotation resource. EnsDb packages (created via the &lt;code&gt;ensembldb&lt;/code&gt; package) are derived directly from Ensembl’s annotation of genes, transcripts, and proteins for specific genome builds. They reflect Ensembl’s standardized data model and genomic coordinates.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;major-transcript-reference-systems&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Major Transcript Reference Systems&lt;/h3&gt;
&lt;p&gt;Different annotation resources define transcripts differently, and “canonical” transcripts can refer to the preferred or most representative isoforms per gene. Here are some prominent systems:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;16%&#34; /&gt;
&lt;col width=&#34;67%&#34; /&gt;
&lt;col width=&#34;16%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Reference System&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Canonical Selection&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;UCSC (knownGene)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Aggregates gene predictions, uses its own transcript IDs; many overlaps with RefSeq/Ensembl&lt;/td&gt;
&lt;td&gt;UCSC-specific rules&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;Ensembl&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Own annotation pipeline; covers standard and alternative transcripts, updated regularly&lt;/td&gt;
&lt;td&gt;Ensembl canonical&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;RefSeq&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Curated by NCBI; focuses on high-confidence, experimentally validated transcripts&lt;/td&gt;
&lt;td&gt;RefSeq Select&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;MANE&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;“Matched Annotation from NCBI and EMBL-EBI”; a collaboration to produce a single transcript per protein-coding gene, identical in both RefSeq and Ensembl&lt;/td&gt;
&lt;td&gt;MANE Select&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;additional-notes&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Additional Notes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RefSeq&lt;/strong&gt; annotations are highly curated, with a focus on stability and biological accuracy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MANE&lt;/strong&gt; transcripts provide a harmonized “best” transcript for each gene, facilitating cross-platform comparisons and clinical reporting.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Canonical transcripts&lt;/strong&gt; in Ensembl and UCSC are assigned based on expression, conservation, clinical relevance, or other attributes; the computational definitions may differ.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;why-these-differences-matter&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Why These Differences Matter&lt;/h3&gt;
&lt;p&gt;Selecting the appropriate annotation resource in your analysis affects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Transcript/gene definitions&lt;/strong&gt;: Variations in exon boundaries, IDs, and number of isoforms.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reproducibility&lt;/strong&gt;: Results may change depending on annotation source/version.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interpretation&lt;/strong&gt;: Clinical applications and downstream analyses (e.g., variant annotation) can be impacted by transcript choice.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In practice, choosing the right isoform of the mRNA can matter a lot for annotating your variants, the protein amino acid changes can be different based on the isoforms that are selected.&lt;/p&gt;
&lt;p&gt;When annotating peaks for ChIP-seq data. Peaks have different distances among different isoforms.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-txdb-object-using-canonical-transcripts-only&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Create a TxDb object using canonical transcripts only&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(GenomicRanges)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(AnnotationHub)
library(ensembldb)
# load hg38 transcript
# directly filter canonical transcripts from the Ensembl database
ah&amp;lt;- AnnotationHub(localHub = FALSE)
edb&amp;lt;- ah[[&amp;quot;AH98047&amp;quot;]]

edb&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; EnsDb for Ensembl:
#&amp;gt; |Backend: SQLite
#&amp;gt; |Db type: EnsDb
#&amp;gt; |Type of Gene ID: Ensembl Gene ID
#&amp;gt; |Supporting package: ensembldb
#&amp;gt; |Db created by: ensembldb package from Bioconductor
#&amp;gt; |script_version: 0.3.7
#&amp;gt; |Creation time: Sat Dec 18 14:48:15 2021
#&amp;gt; |ensembl_version: 105
#&amp;gt; |ensembl_host: localhost
#&amp;gt; |Organism: Homo sapiens
#&amp;gt; |taxonomy_id: 9606
#&amp;gt; |genome_build: GRCh38
#&amp;gt; |DBSCHEMAVERSION: 2.2
#&amp;gt; | No. of genes: 69329.
#&amp;gt; | No. of transcripts: 268255.
#&amp;gt; |Protein data available.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;transcripts(edb)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; GRanges object with 268255 ranges and 11 metadata columns:
#&amp;gt;                   seqnames            ranges strand |           tx_id
#&amp;gt;                      &amp;lt;Rle&amp;gt;         &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt; |     &amp;lt;character&amp;gt;
#&amp;gt;   ENST00000456328        1       11869-14409      + | ENST00000456328
#&amp;gt;   ENST00000450305        1       12010-13670      + | ENST00000450305
#&amp;gt;   ENST00000488147        1       14404-29570      - | ENST00000488147
#&amp;gt;   ENST00000619216        1       17369-17436      - | ENST00000619216
#&amp;gt;   ENST00000473358        1       29554-31097      + | ENST00000473358
#&amp;gt;               ...      ...               ...    ... .             ...
#&amp;gt;   ENST00000420810        Y 26549425-26549743      + | ENST00000420810
#&amp;gt;   ENST00000456738        Y 26586642-26591601      - | ENST00000456738
#&amp;gt;   ENST00000435945        Y 26594851-26634652      - | ENST00000435945
#&amp;gt;   ENST00000435741        Y 26626520-26627159      - | ENST00000435741
#&amp;gt;   ENST00000431853        Y 56855244-56855488      + | ENST00000431853
#&amp;gt;                               tx_biotype tx_cds_seq_start tx_cds_seq_end
#&amp;gt;                              &amp;lt;character&amp;gt;        &amp;lt;integer&amp;gt;      &amp;lt;integer&amp;gt;
#&amp;gt;   ENST00000456328   processed_transcript             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000450305 transcribed_unproces..             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000488147 unprocessed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000619216                  miRNA             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000473358                 lncRNA             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;               ...                    ...              ...            ...
#&amp;gt;   ENST00000420810   processed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000456738 unprocessed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000435945 unprocessed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000435741   processed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000431853   processed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;                           gene_id tx_support_level     tx_id_version gc_content
#&amp;gt;                       &amp;lt;character&amp;gt;        &amp;lt;integer&amp;gt;       &amp;lt;character&amp;gt;  &amp;lt;numeric&amp;gt;
#&amp;gt;   ENST00000456328 ENSG00000223972                1 ENST00000456328.2    55.3410
#&amp;gt;   ENST00000450305 ENSG00000223972             &amp;lt;NA&amp;gt; ENST00000450305.2    58.0696
#&amp;gt;   ENST00000488147 ENSG00000227232             &amp;lt;NA&amp;gt; ENST00000488147.1    61.1399
#&amp;gt;   ENST00000619216 ENSG00000278267             &amp;lt;NA&amp;gt; ENST00000619216.1    61.7647
#&amp;gt;   ENST00000473358 ENSG00000243485                5 ENST00000473358.1    58.5674
#&amp;gt;               ...             ...              ...               ...        ...
#&amp;gt;   ENST00000420810 ENSG00000224240             &amp;lt;NA&amp;gt; ENST00000420810.1    41.6928
#&amp;gt;   ENST00000456738 ENSG00000227629             &amp;lt;NA&amp;gt; ENST00000456738.1    44.7368
#&amp;gt;   ENST00000435945 ENSG00000237917             &amp;lt;NA&amp;gt; ENST00000435945.1    44.2875
#&amp;gt;   ENST00000435741 ENSG00000231514             &amp;lt;NA&amp;gt; ENST00000435741.1    55.1562
#&amp;gt;   ENST00000431853 ENSG00000235857             &amp;lt;NA&amp;gt; ENST00000431853.1    53.0612
#&amp;gt;                   tx_external_name tx_is_canonical         tx_name
#&amp;gt;                        &amp;lt;character&amp;gt;       &amp;lt;integer&amp;gt;     &amp;lt;character&amp;gt;
#&amp;gt;   ENST00000456328      DDX11L1-202               0 ENST00000456328
#&amp;gt;   ENST00000450305      DDX11L1-201               1 ENST00000450305
#&amp;gt;   ENST00000488147       WASH7P-201               1 ENST00000488147
#&amp;gt;   ENST00000619216    MIR6859-1-201               1 ENST00000619216
#&amp;gt;   ENST00000473358  MIR1302-2HG-202               1 ENST00000473358
#&amp;gt;               ...              ...             ...             ...
#&amp;gt;   ENST00000420810      CYCSP49-201               1 ENST00000420810
#&amp;gt;   ENST00000456738   SLC25A15P1-201               1 ENST00000456738
#&amp;gt;   ENST00000435945      PARP4P1-201               1 ENST00000435945
#&amp;gt;   ENST00000435741       CCNQP2-201               1 ENST00000435741
#&amp;gt;   ENST00000431853      CTBP2P1-201               1 ENST00000431853
#&amp;gt;   -------
#&amp;gt;   seqinfo: 456 sequences (1 circular) from GRCh38 genome&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a metadata column called &lt;code&gt;tx_is_canonical&lt;/code&gt; to show if the transcript is canonical or not.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get transcripts directly from the EnsDb object with canonical filter
hg38_transcripts&amp;lt;- transcripts(edb, filter = ~ tx_is_canonical == TRUE)

# only the canonical transcripts are retained. tx_is_canonical are all 1s
hg38_transcripts&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; GRanges object with 69329 ranges and 11 metadata columns:
#&amp;gt;                   seqnames            ranges strand |           tx_id
#&amp;gt;                      &amp;lt;Rle&amp;gt;         &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt; |     &amp;lt;character&amp;gt;
#&amp;gt;   ENST00000450305        1       12010-13670      + | ENST00000450305
#&amp;gt;   ENST00000488147        1       14404-29570      - | ENST00000488147
#&amp;gt;   ENST00000619216        1       17369-17436      - | ENST00000619216
#&amp;gt;   ENST00000473358        1       29554-31097      + | ENST00000473358
#&amp;gt;   ENST00000607096        1       30366-30503      + | ENST00000607096
#&amp;gt;               ...      ...               ...    ... .             ...
#&amp;gt;   ENST00000420810        Y 26549425-26549743      + | ENST00000420810
#&amp;gt;   ENST00000456738        Y 26586642-26591601      - | ENST00000456738
#&amp;gt;   ENST00000435945        Y 26594851-26634652      - | ENST00000435945
#&amp;gt;   ENST00000435741        Y 26626520-26627159      - | ENST00000435741
#&amp;gt;   ENST00000431853        Y 56855244-56855488      + | ENST00000431853
#&amp;gt;                               tx_biotype tx_cds_seq_start tx_cds_seq_end
#&amp;gt;                              &amp;lt;character&amp;gt;        &amp;lt;integer&amp;gt;      &amp;lt;integer&amp;gt;
#&amp;gt;   ENST00000450305 transcribed_unproces..             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000488147 unprocessed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000619216                  miRNA             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000473358                 lncRNA             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000607096                  miRNA             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;               ...                    ...              ...            ...
#&amp;gt;   ENST00000420810   processed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000456738 unprocessed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000435945 unprocessed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000435741   processed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000431853   processed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;                           gene_id tx_support_level     tx_id_version gc_content
#&amp;gt;                       &amp;lt;character&amp;gt;        &amp;lt;integer&amp;gt;       &amp;lt;character&amp;gt;  &amp;lt;numeric&amp;gt;
#&amp;gt;   ENST00000450305 ENSG00000223972             &amp;lt;NA&amp;gt; ENST00000450305.2    58.0696
#&amp;gt;   ENST00000488147 ENSG00000227232             &amp;lt;NA&amp;gt; ENST00000488147.1    61.1399
#&amp;gt;   ENST00000619216 ENSG00000278267             &amp;lt;NA&amp;gt; ENST00000619216.1    61.7647
#&amp;gt;   ENST00000473358 ENSG00000243485                5 ENST00000473358.1    58.5674
#&amp;gt;   ENST00000607096 ENSG00000284332             &amp;lt;NA&amp;gt; ENST00000607096.1    31.1594
#&amp;gt;               ...             ...              ...               ...        ...
#&amp;gt;   ENST00000420810 ENSG00000224240             &amp;lt;NA&amp;gt; ENST00000420810.1    41.6928
#&amp;gt;   ENST00000456738 ENSG00000227629             &amp;lt;NA&amp;gt; ENST00000456738.1    44.7368
#&amp;gt;   ENST00000435945 ENSG00000237917             &amp;lt;NA&amp;gt; ENST00000435945.1    44.2875
#&amp;gt;   ENST00000435741 ENSG00000231514             &amp;lt;NA&amp;gt; ENST00000435741.1    55.1562
#&amp;gt;   ENST00000431853 ENSG00000235857             &amp;lt;NA&amp;gt; ENST00000431853.1    53.0612
#&amp;gt;                   tx_external_name tx_is_canonical         tx_name
#&amp;gt;                        &amp;lt;character&amp;gt;       &amp;lt;integer&amp;gt;     &amp;lt;character&amp;gt;
#&amp;gt;   ENST00000450305      DDX11L1-201               1 ENST00000450305
#&amp;gt;   ENST00000488147       WASH7P-201               1 ENST00000488147
#&amp;gt;   ENST00000619216    MIR6859-1-201               1 ENST00000619216
#&amp;gt;   ENST00000473358  MIR1302-2HG-202               1 ENST00000473358
#&amp;gt;   ENST00000607096    MIR1302-2-201               1 ENST00000607096
#&amp;gt;               ...              ...             ...             ...
#&amp;gt;   ENST00000420810      CYCSP49-201               1 ENST00000420810
#&amp;gt;   ENST00000456738   SLC25A15P1-201               1 ENST00000456738
#&amp;gt;   ENST00000435945      PARP4P1-201               1 ENST00000435945
#&amp;gt;   ENST00000435741       CCNQP2-201               1 ENST00000435741
#&amp;gt;   ENST00000431853      CTBP2P1-201               1 ENST00000431853
#&amp;gt;   -------
#&amp;gt;   seqinfo: 456 sequences (1 circular) from GRCh38 genome&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are unconventional chromosome names such as LRG_239,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;seqnames(hg38_transcripts)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; factor-Rle of length 69329 with 456 runs
#&amp;gt;   Lengths:                       5702 ...                        522
#&amp;gt;   Values : 1                          ...         Y                 
#&amp;gt; Levels(456): 1 10 11 12 13 14 15 16 ... LRG_763 LRG_792 LRG_793 LRG_93 MT X Y&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# only keep the standard names
hg38_transcripts&amp;lt;- hg38_transcripts %&amp;gt;%
  keepStandardChromosomes(pruning.mode = &amp;quot;coarse&amp;quot;)

seqnames(hg38_transcripts)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; factor-Rle of length 62800 with 25 runs
#&amp;gt;   Lengths: 5702 2429 3488 3152 1448 2358 2295 ... 3132 2554 2417   37 2522  522
#&amp;gt;   Values :   1    10   11   12   13   14   15 ...   7    8    9    MT   X    Y 
#&amp;gt; Levels(25): 1 10 11 12 13 14 15 16 17 18 19 2 20 21 22 3 4 5 6 7 8 9 MT X Y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;rename chromosome from 1,2,3 to chr1, chr2, chr3 etc
so it can overlap with the peaks if your peaks are in chr1 start end format.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;seqlevels(hg38_transcripts)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt;  [1] &amp;quot;1&amp;quot;  &amp;quot;10&amp;quot; &amp;quot;11&amp;quot; &amp;quot;12&amp;quot; &amp;quot;13&amp;quot; &amp;quot;14&amp;quot; &amp;quot;15&amp;quot; &amp;quot;16&amp;quot; &amp;quot;17&amp;quot; &amp;quot;18&amp;quot; &amp;quot;19&amp;quot; &amp;quot;2&amp;quot;  &amp;quot;20&amp;quot; &amp;quot;21&amp;quot; &amp;quot;22&amp;quot;
#&amp;gt; [16] &amp;quot;3&amp;quot;  &amp;quot;4&amp;quot;  &amp;quot;5&amp;quot;  &amp;quot;6&amp;quot;  &amp;quot;7&amp;quot;  &amp;quot;8&amp;quot;  &amp;quot;9&amp;quot;  &amp;quot;MT&amp;quot; &amp;quot;X&amp;quot;  &amp;quot;Y&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# prefix chr
new_seqnames &amp;lt;- paste0(&amp;quot;chr&amp;quot;, seqlevels(hg38_transcripts))
names(new_seqnames) &amp;lt;- seqlevels(hg38_transcripts)

new_seqnames&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt;       1      10      11      12      13      14      15      16      17      18 
#&amp;gt;  &amp;quot;chr1&amp;quot; &amp;quot;chr10&amp;quot; &amp;quot;chr11&amp;quot; &amp;quot;chr12&amp;quot; &amp;quot;chr13&amp;quot; &amp;quot;chr14&amp;quot; &amp;quot;chr15&amp;quot; &amp;quot;chr16&amp;quot; &amp;quot;chr17&amp;quot; &amp;quot;chr18&amp;quot; 
#&amp;gt;      19       2      20      21      22       3       4       5       6       7 
#&amp;gt; &amp;quot;chr19&amp;quot;  &amp;quot;chr2&amp;quot; &amp;quot;chr20&amp;quot; &amp;quot;chr21&amp;quot; &amp;quot;chr22&amp;quot;  &amp;quot;chr3&amp;quot;  &amp;quot;chr4&amp;quot;  &amp;quot;chr5&amp;quot;  &amp;quot;chr6&amp;quot;  &amp;quot;chr7&amp;quot; 
#&amp;gt;       8       9      MT       X       Y 
#&amp;gt;  &amp;quot;chr8&amp;quot;  &amp;quot;chr9&amp;quot; &amp;quot;chrMT&amp;quot;  &amp;quot;chrX&amp;quot;  &amp;quot;chrY&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hg38_transcripts &amp;lt;- renameSeqlevels(hg38_transcripts, new_seqnames)

# add the gene symbol using database mapping for better accuracy
hg38_transcripts$SYMBOL &amp;lt;- mapIds(edb,
                                 keys = hg38_transcripts$tx_id,
                                 column = &amp;quot;SYMBOL&amp;quot;,
                                 keytype = &amp;quot;TXID&amp;quot;)


hg38_transcripts&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; GRanges object with 62800 ranges and 12 metadata columns:
#&amp;gt;                   seqnames            ranges strand |           tx_id
#&amp;gt;                      &amp;lt;Rle&amp;gt;         &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt; |     &amp;lt;character&amp;gt;
#&amp;gt;   ENST00000450305     chr1       12010-13670      + | ENST00000450305
#&amp;gt;   ENST00000488147     chr1       14404-29570      - | ENST00000488147
#&amp;gt;   ENST00000619216     chr1       17369-17436      - | ENST00000619216
#&amp;gt;   ENST00000473358     chr1       29554-31097      + | ENST00000473358
#&amp;gt;   ENST00000607096     chr1       30366-30503      + | ENST00000607096
#&amp;gt;               ...      ...               ...    ... .             ...
#&amp;gt;   ENST00000420810     chrY 26549425-26549743      + | ENST00000420810
#&amp;gt;   ENST00000456738     chrY 26586642-26591601      - | ENST00000456738
#&amp;gt;   ENST00000435945     chrY 26594851-26634652      - | ENST00000435945
#&amp;gt;   ENST00000435741     chrY 26626520-26627159      - | ENST00000435741
#&amp;gt;   ENST00000431853     chrY 56855244-56855488      + | ENST00000431853
#&amp;gt;                               tx_biotype tx_cds_seq_start tx_cds_seq_end
#&amp;gt;                              &amp;lt;character&amp;gt;        &amp;lt;integer&amp;gt;      &amp;lt;integer&amp;gt;
#&amp;gt;   ENST00000450305 transcribed_unproces..             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000488147 unprocessed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000619216                  miRNA             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000473358                 lncRNA             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000607096                  miRNA             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;               ...                    ...              ...            ...
#&amp;gt;   ENST00000420810   processed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000456738 unprocessed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000435945 unprocessed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000435741   processed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;   ENST00000431853   processed_pseudogene             &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt;
#&amp;gt;                           gene_id tx_support_level     tx_id_version gc_content
#&amp;gt;                       &amp;lt;character&amp;gt;        &amp;lt;integer&amp;gt;       &amp;lt;character&amp;gt;  &amp;lt;numeric&amp;gt;
#&amp;gt;   ENST00000450305 ENSG00000223972             &amp;lt;NA&amp;gt; ENST00000450305.2    58.0696
#&amp;gt;   ENST00000488147 ENSG00000227232             &amp;lt;NA&amp;gt; ENST00000488147.1    61.1399
#&amp;gt;   ENST00000619216 ENSG00000278267             &amp;lt;NA&amp;gt; ENST00000619216.1    61.7647
#&amp;gt;   ENST00000473358 ENSG00000243485                5 ENST00000473358.1    58.5674
#&amp;gt;   ENST00000607096 ENSG00000284332             &amp;lt;NA&amp;gt; ENST00000607096.1    31.1594
#&amp;gt;               ...             ...              ...               ...        ...
#&amp;gt;   ENST00000420810 ENSG00000224240             &amp;lt;NA&amp;gt; ENST00000420810.1    41.6928
#&amp;gt;   ENST00000456738 ENSG00000227629             &amp;lt;NA&amp;gt; ENST00000456738.1    44.7368
#&amp;gt;   ENST00000435945 ENSG00000237917             &amp;lt;NA&amp;gt; ENST00000435945.1    44.2875
#&amp;gt;   ENST00000435741 ENSG00000231514             &amp;lt;NA&amp;gt; ENST00000435741.1    55.1562
#&amp;gt;   ENST00000431853 ENSG00000235857             &amp;lt;NA&amp;gt; ENST00000431853.1    53.0612
#&amp;gt;                   tx_external_name tx_is_canonical         tx_name      SYMBOL
#&amp;gt;                        &amp;lt;character&amp;gt;       &amp;lt;integer&amp;gt;     &amp;lt;character&amp;gt; &amp;lt;character&amp;gt;
#&amp;gt;   ENST00000450305      DDX11L1-201               1 ENST00000450305     DDX11L1
#&amp;gt;   ENST00000488147       WASH7P-201               1 ENST00000488147      WASH7P
#&amp;gt;   ENST00000619216    MIR6859-1-201               1 ENST00000619216   MIR6859-1
#&amp;gt;   ENST00000473358  MIR1302-2HG-202               1 ENST00000473358 MIR1302-2HG
#&amp;gt;   ENST00000607096    MIR1302-2-201               1 ENST00000607096   MIR1302-2
#&amp;gt;               ...              ...             ...             ...         ...
#&amp;gt;   ENST00000420810      CYCSP49-201               1 ENST00000420810     CYCSP49
#&amp;gt;   ENST00000456738   SLC25A15P1-201               1 ENST00000456738  SLC25A15P1
#&amp;gt;   ENST00000435945      PARP4P1-201               1 ENST00000435945     PARP4P1
#&amp;gt;   ENST00000435741       CCNQP2-201               1 ENST00000435741      CCNQP2
#&amp;gt;   ENST00000431853      CTBP2P1-201               1 ENST00000431853     CTBP2P1
#&amp;gt;   -------
#&amp;gt;   seqinfo: 25 sequences (1 circular) from GRCh38 genome&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a &lt;code&gt;GenomicRanges&lt;/code&gt; object with only the canonical transcripts!! You can then use it to annotate your ChIP-seq peaks for example.&lt;/p&gt;
&lt;p&gt;In my next blog post, I am going to show you how to calculate &lt;a href=&#34;https://genomebiology.biomedcentral.com/articles/10.1186/s13059-020-1934-6&#34;&gt;regulatory potential score&lt;/a&gt; using ChIP-seq peaks and this canonical transcripts annotation.&lt;/p&gt;
&lt;p&gt;Let’s take a look at the UCSC annotation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;txdb&amp;lt;- TxDb.Hsapiens.UCSC.hg38.knownGene

UCSC_transcripts&amp;lt;- transcripts(txdb)
UCSC_transcripts&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; GRanges object with 276905 ranges and 2 metadata columns:
#&amp;gt;                       seqnames        ranges strand |     tx_id
#&amp;gt;                          &amp;lt;Rle&amp;gt;     &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt; | &amp;lt;integer&amp;gt;
#&amp;gt;        [1]                chr1   11869-14409      + |         1
#&amp;gt;        [2]                chr1   12010-13670      + |         2
#&amp;gt;        [3]                chr1   29554-31097      + |         3
#&amp;gt;        [4]                chr1   30267-31109      + |         4
#&amp;gt;        [5]                chr1   30366-30503      + |         5
#&amp;gt;        ...                 ...           ...    ... .       ...
#&amp;gt;   [276901] chrX_MU273397v1_alt 239036-260095      - |    276901
#&amp;gt;   [276902] chrX_MU273397v1_alt 272358-282686      - |    276902
#&amp;gt;   [276903] chrX_MU273397v1_alt 314193-316302      - |    276903
#&amp;gt;   [276904] chrX_MU273397v1_alt 314813-315236      - |    276904
#&amp;gt;   [276905] chrX_MU273397v1_alt 324527-324923      - |    276905
#&amp;gt;                      tx_name
#&amp;gt;                  &amp;lt;character&amp;gt;
#&amp;gt;        [1] ENST00000456328.2
#&amp;gt;        [2] ENST00000450305.2
#&amp;gt;        [3] ENST00000473358.1
#&amp;gt;        [4] ENST00000469289.1
#&amp;gt;        [5] ENST00000607096.1
#&amp;gt;        ...               ...
#&amp;gt;   [276901] ENST00000710260.1
#&amp;gt;   [276902] ENST00000710028.1
#&amp;gt;   [276903] ENST00000710030.1
#&amp;gt;   [276904] ENST00000710216.1
#&amp;gt;   [276905] ENST00000710031.1
#&amp;gt;   -------
#&amp;gt;   seqinfo: 711 sequences (1 circular) from hg38 genome&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(seqlevels(UCSC_transcripts), n = 30)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt;  [1] &amp;quot;chr1&amp;quot;                &amp;quot;chr2&amp;quot;                &amp;quot;chr3&amp;quot;               
#&amp;gt;  [4] &amp;quot;chr4&amp;quot;                &amp;quot;chr5&amp;quot;                &amp;quot;chr6&amp;quot;               
#&amp;gt;  [7] &amp;quot;chr7&amp;quot;                &amp;quot;chr8&amp;quot;                &amp;quot;chr9&amp;quot;               
#&amp;gt; [10] &amp;quot;chr10&amp;quot;               &amp;quot;chr11&amp;quot;               &amp;quot;chr12&amp;quot;              
#&amp;gt; [13] &amp;quot;chr13&amp;quot;               &amp;quot;chr14&amp;quot;               &amp;quot;chr15&amp;quot;              
#&amp;gt; [16] &amp;quot;chr16&amp;quot;               &amp;quot;chr17&amp;quot;               &amp;quot;chr18&amp;quot;              
#&amp;gt; [19] &amp;quot;chr19&amp;quot;               &amp;quot;chr20&amp;quot;               &amp;quot;chr21&amp;quot;              
#&amp;gt; [22] &amp;quot;chr22&amp;quot;               &amp;quot;chrX&amp;quot;                &amp;quot;chrY&amp;quot;               
#&amp;gt; [25] &amp;quot;chrM&amp;quot;                &amp;quot;chr1_GL383518v1_alt&amp;quot; &amp;quot;chr1_GL383519v1_alt&amp;quot;
#&amp;gt; [28] &amp;quot;chr1_GL383520v2_alt&amp;quot; &amp;quot;chr1_KI270759v1_alt&amp;quot; &amp;quot;chr1_KI270760v1_alt&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we see strange chromosome names such as &lt;code&gt;chr1_GL383518v1_alt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The human reference assembly includes not just the main chromosomes (e.g., chr1, chr2…) but also alternate loci and fix patches.&lt;/p&gt;
&lt;p&gt;“alt” contigs cover areas of the genome where population-level structural variation or highly polymorphic regions cannot be represented by a single, linear reference.&lt;/p&gt;
&lt;p&gt;Each name describes: The primary chromosome (chr1)&lt;/p&gt;
&lt;p&gt;The unique contig identifier (GL383518v1, KI270759v1, etc.; these are GenBank accession numbers with version)&lt;/p&gt;
&lt;p&gt;The “_alt” suffix, indicating an alternate locus or haplotype scaffold.&lt;/p&gt;
&lt;p&gt;Also, this transcripts annotation does not have gene symbols and you may need to map it using &lt;code&gt;org.Hs.eg.db&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;get all the genes representation&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;genes(txdb)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; GRanges object with 30733 ranges and 1 metadata column:
#&amp;gt;             seqnames              ranges strand |     gene_id
#&amp;gt;                &amp;lt;Rle&amp;gt;           &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt; | &amp;lt;character&amp;gt;
#&amp;gt;           1    chr19   58345178-58362751      - |           1
#&amp;gt;          10     chr8   18386311-18401218      + |          10
#&amp;gt;         100    chr20   44584896-44652252      - |         100
#&amp;gt;        1000    chr18   27932879-28177946      - |        1000
#&amp;gt;   100008586     chrX   49551278-49568218      + |   100008586
#&amp;gt;         ...      ...                 ...    ... .         ...
#&amp;gt;        9990    chr15   34229784-34338060      - |        9990
#&amp;gt;        9991     chr9 112217716-112333664      - |        9991
#&amp;gt;        9992    chr21   34364006-34371381      + |        9992
#&amp;gt;        9993    chr22   19036282-19122454      - |        9993
#&amp;gt;        9997    chr22   50523568-50526461      - |        9997
#&amp;gt;   -------
#&amp;gt;   seqinfo: 711 sequences (1 circular) from hg38 genome&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note this function collapse all the transcripts from the same gene into a single GenomicRanges. This may or may not be what you want. It effectively getting the longest isoform of that gene.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;When building workflows in Bioconductor, it’s crucial to know the origins and intentions behind annotation data packages. Whether you rely on UCSC, Ensembl, RefSeq, or MANE, your chosen dataset will shape how genes and transcripts are referenced throughout your research. Always specify your annotation sources for transparent, reproducible results.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mastering Bioinformatics in the Age of AI: Foundational Skills for the Modern Scientist</title>
      <link>/post/ai-bioinformatics/</link>
      <pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate>
      
      <guid>/post/ai-bioinformatics/</guid>
      <description>&lt;link href=&#34;/rmarkdown-libs/vembedr/css/vembedr.css&#34; rel=&#34;stylesheet&#34; /&gt;


&lt;p&gt;&lt;strong&gt;To not miss a post like this, sign up for my &lt;a href=&#34;https://divingintogeneticsandgenomics.ck.page/profile&#34;&gt;newsletter&lt;/a&gt; to learn computational
biology and bioinformatics.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AI is transforming every field — and bioinformatics is no exception.
From designing drug molecules in minutes to writing entire pipelines, generative AI is making it faster than ever to process biological data. But here’s the truth:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AI doesn’t understand biology — &lt;em&gt;you&lt;/em&gt; do.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s why, in this new era, your value isn’t replaced by AI — it’s multiplied by your ability to &lt;strong&gt;judge, validate, and improve&lt;/strong&gt; what AI produces.&lt;/p&gt;
&lt;p&gt;In this post, you’ll learn the &lt;strong&gt;5 essential skills&lt;/strong&gt; every bioinformatician must master to thrive in the age of AI.&lt;/p&gt;
&lt;p&gt;If you want to watch the video:&lt;/p&gt;
&lt;div class=&#34;vembedr&#34;&gt;
&lt;div&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/uU0fix2Nn1M&#34; width=&#34;533&#34; height=&#34;300&#34; frameborder=&#34;0&#34; allowfullscreen=&#34;&#34; data-external=&#34;1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div id=&#34;why-ai-isnt-enough-yet&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why AI Isn’t Enough (Yet)&lt;/h2&gt;
&lt;p&gt;AI can generate fast, elegant code — but often without understanding the &lt;em&gt;biological logic&lt;/em&gt; behind it. A recent benchmark (BioCoder) shows that even ChatGPT-4 scores only 50% accuracy on complex bioinformatics tasks.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;80% of AI-generated bioinformatics code requires human correction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means your expertise is more important than ever. AI can be an assistant — but only if &lt;em&gt;you&lt;/em&gt; can spot the errors it doesn’t know it’s making.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;common-ai-mistakes-in-bioinformatics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Common AI Mistakes in Bioinformatics&lt;/h2&gt;
&lt;p&gt;Before diving into the five core skills, here are common red flags in AI-generated code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Off-by-one errors: e.g., treating 0-based coordinates as 1-based&lt;/li&gt;
&lt;li&gt;Strand orientation confusion: ignoring 5’ to 3’ directionality&lt;/li&gt;
&lt;li&gt;File format mix-ups: VCF vs GFF vs BED vs SAM/BAM&lt;/li&gt;
&lt;li&gt;Misapplied statistics: running t-tests on non-normal data&lt;/li&gt;
&lt;li&gt;Memory disasters: loading whole genomes instead of streaming data&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;skill-1-know-your-data-formats&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Skill #1: Know Your Data Formats&lt;/h2&gt;
&lt;p&gt;Bioinformatics is filled with diverse file types — FASTQ, BAM, VCF, GTF, BED — and each one has quirks. You need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recognize single-end vs paired-end reads&lt;/li&gt;
&lt;li&gt;Interpret quality scores in FASTQ&lt;/li&gt;
&lt;li&gt;Understand how coordinates are indexed in BED (0-based) vs VCF (1-based)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI might run the code, but if it misreads a file, it might quietly corrupt your results.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;skill-2-understand-statistics-deeply&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Skill #2: Understand Statistics (Deeply)&lt;/h2&gt;
&lt;p&gt;Don’t let AI misuse statistical methods. Know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When to use t-tests vs non-parametric tests&lt;/li&gt;
&lt;li&gt;Why variance stabilization matters in DESeq2&lt;/li&gt;
&lt;li&gt;How to correct for multiple testing with FDR&lt;/li&gt;
&lt;li&gt;The meaning and difference between TPM, RPKM, and raw counts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bad stats = beautiful graphs with meaningless results.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;skill-3-biological-validation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Skill #3: Biological Validation&lt;/h2&gt;
&lt;p&gt;AI doesn’t know that a protein must be divisible by three codons to be valid.
You do.
Use your biological knowledge to catch logic errors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reverse complements must be correct (5’ to 3’)&lt;/li&gt;
&lt;li&gt;Splice sites should follow GT-AG rules&lt;/li&gt;
&lt;li&gt;Cell-type-specific expression should make sense (e.g., surfactant proteins don’t belong in nuclei)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;skill-4-review-code-like-a-scientist&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Skill #4: Review Code Like a Scientist&lt;/h2&gt;
&lt;p&gt;Here’s a quick AI code review checklist:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are all parameters clearly defined?&lt;/li&gt;
&lt;li&gt;Does the script run without errors?&lt;/li&gt;
&lt;li&gt;Does it handle empty files or edge cases?&lt;/li&gt;
&lt;li&gt;Is the code reproducible?&lt;/li&gt;
&lt;li&gt;Is it version controlled and commented?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When AI gives you something, don’t just copy-paste it. Inspect it. Stress-test it. Own it.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;skill-5-build-tests-like-a-wet-lab-scientist&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Skill #5: Build Tests Like a Wet Lab Scientist&lt;/h2&gt;
&lt;p&gt;Don’t trust AI pipelines until they pass positive and negative controls:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variant calling? Use known reference variants from Genome in a Bottle.&lt;/li&gt;
&lt;li&gt;Sequence alignment? Identical sequences should score 100% similarity. Random ones shouldn’t.&lt;/li&gt;
&lt;li&gt;Gene expression? Make sure housekeeping genes behave as expected.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Think of this like bench science — every experiment needs controls.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;final-thoughts-use-ai-but-dont-trust-it-blindly&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Final Thoughts: Use AI, But Don’t Trust It Blindly&lt;/h2&gt;
&lt;p&gt;What to do next:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Trust, but verify everything AI gives you.&lt;/li&gt;
&lt;li&gt;Document your prompts and outputs for reproducibility.&lt;/li&gt;
&lt;li&gt;Stay grounded in fundamentals — file formats, biology, stats, code structure.&lt;/li&gt;
&lt;li&gt;Connect with the community: Share, discuss, and learn from others.&lt;/li&gt;
&lt;li&gt;Let AI amplify your skills — not replace your judgment.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;AI is your assistant, not your replacement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bioinformatics in the age of AI will reward those who know both how to prompt and how to question the answers.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Want more?
Check out &lt;a href=&#34;https://divingintogeneticsandgenomics.kit.com/profile&#34;&gt;my newsletter&lt;/a&gt; for weekly bioinformatics tips and coding insights.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Good Enough Practices for Reproducible Computing</title>
      <link>/talk/2025-moderna-reproducible/</link>
      <pubDate>Wed, 25 Jun 2025 11:00:00 +0000</pubDate>
      
      <guid>/talk/2025-moderna-reproducible/</guid>
      <description>&lt;p&gt;I talked about Good enough practices for reproducible Bioinformatics analysis at Moderna.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/moderna_talk.jpeg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;/img/moderna_talk2.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bioinformatics upskilling workshop</title>
      <link>/talk/2025-fog-bioinfo/</link>
      <pubDate>Tue, 24 Jun 2025 14:00:00 +0000</pubDate>
      
      <guid>/talk/2025-fog-bioinfo/</guid>
      <description>&lt;p&gt;Dean Lee and I gave a workshop on bioinformatics upskilling at Festival of Genomics (FoG) Boston.&lt;/p&gt;

&lt;p&gt;This is a write-up by Aayush Ojha &lt;a href=&#34;https://medium.com/@iamaayushojha/my-takeaways-from-computational-biology-upskilling-workshop-c9c29682695c&#34; target=&#34;_blank&#34;&gt;https://medium.com/@iamaayushojha/my-takeaways-from-computational-biology-upskilling-workshop-c9c29682695c&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/Tommy_Tang_FoG.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;/img/FoG1.webp&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;/img/FoG2.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Cancer Drugs Really Work</title>
      <link>/post/cancer-drug/</link>
      <pubDate>Fri, 20 Jun 2025 00:00:00 +0000</pubDate>
      
      <guid>/post/cancer-drug/</guid>
      <description>&lt;p&gt;&lt;strong&gt;To not miss a post like this, sign up for my &lt;a href=&#34;https://divingintogeneticsandgenomics.ck.page/profile&#34;&gt;newsletter&lt;/a&gt; to learn computational
biology and bioinformatics.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Suna was 28.
She had melanoma.
Chemo left her wrecked—her hair gone, her strength gone, and her hope fading.
Doctors gave her weeks.&lt;/p&gt;
&lt;p&gt;Then they tried something different.&lt;/p&gt;
&lt;p&gt;It didn’t poison the tumor. It didn’t cut or burn.
It &lt;strong&gt;woke up her immune system&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Her own T-cells found the cancer.
Attacked it.
Killed it.&lt;/p&gt;
&lt;p&gt;She survived.&lt;/p&gt;
&lt;p&gt;That story isn’t rare anymore.
And that’s the power of &lt;strong&gt;modern cancer therapy&lt;/strong&gt;—an evolving arsenal that’s learning to &lt;strong&gt;outsmart&lt;/strong&gt;, not just outgun, one of biology’s deadliest games.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;from-brute-force-to-targeted-strikes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;From Brute Force to Targeted Strikes&lt;/h2&gt;
&lt;p&gt;The earliest cancer treatments were blunt. Chemotherapy still plays a crucial role—it’s simple, aggressive, and often lifesaving.&lt;/p&gt;
&lt;p&gt;Chemotherapy works by attacking &lt;strong&gt;rapidly dividing cells&lt;/strong&gt;. That includes cancer—but also hair follicles, blood cells, and the lining of your gut.&lt;/p&gt;
&lt;p&gt;Common mechanisms include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DNA damage&lt;/strong&gt;: Drugs that cross-link DNA strands, halting replication.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mitotic arrest&lt;/strong&gt;: Agents that interfere with &lt;strong&gt;microtubules&lt;/strong&gt; or block enzymes like &lt;strong&gt;topoisomerases&lt;/strong&gt;, freezing cells mid-division.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result: many cancer cells die. But so do many healthy ones.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;the-rise-of-precision&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Rise of Precision&lt;/h2&gt;
&lt;p&gt;As we understood cancer better, we began to see patterns—specific proteins, enzymes, and signals that tumors rely on to grow.&lt;/p&gt;
&lt;p&gt;Enter &lt;strong&gt;targeted therapy&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;These treatments act like guided missiles, striking key cellular machinery:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CDK4/6&lt;/strong&gt;: Cell cycle drivers. Block them, and the cell stalls before it can divide.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VEGF&lt;/strong&gt;: Promotes blood vessel growth. Inhibiting it starves the tumor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Estrogen receptors (ER)&lt;/strong&gt;: In hormone-sensitive tumors, cutting the signal cuts the growth.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HER2&lt;/strong&gt;: A growth factor receptor often overexpressed in breast cancers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;KRAS&lt;/strong&gt;: Long thought “undruggable,” it’s now being indirectly targeted using clever chemistry.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cyclic peptides&lt;/strong&gt;: Synthetic molecules that disrupt protein-protein interactions, wrapping around target surfaces like molecular zip ties.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These strategies offer precision, but precision has a flaw: &lt;strong&gt;mutations&lt;/strong&gt;. Cancer evolves fast. When the target changes, the drug can miss.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;the-immune-system-unleashed&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Immune System, Unleashed&lt;/h2&gt;
&lt;p&gt;Modern cancer therapy didn’t find a better poison.
It found a better idea: &lt;strong&gt;use the body’s own defenses&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Immunotherapy works by helping the immune system do what it does best—recognize and destroy threats.&lt;/p&gt;
&lt;div id=&#34;checkpoint-inhibition&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Checkpoint Inhibition&lt;/h3&gt;
&lt;p&gt;T-cells are powerful, but they’re held in check by built-in brakes like &lt;strong&gt;PD-1&lt;/strong&gt; and &lt;strong&gt;CTLA-4&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Tumors exploit these brakes to hide. Checkpoint inhibitors remove them.&lt;/p&gt;
&lt;p&gt;When activated, T-cells release &lt;strong&gt;IFN-γ&lt;/strong&gt;, a signal that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Increases &lt;strong&gt;MHC I&lt;/strong&gt; on tumor cells, making them easier to spot&lt;/li&gt;
&lt;li&gt;Triggers &lt;strong&gt;CXCL9/10&lt;/strong&gt;, chemokines that bring in immune reinforcements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result? The immune system storms the tumor.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cytokine-therapy&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Cytokine Therapy&lt;/h3&gt;
&lt;p&gt;Cytokines are immune messengers. We can engineer them to target tumors more precisely.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Type I interferons&lt;/strong&gt; drive cancer cells into &lt;strong&gt;senescence&lt;/strong&gt;—a non-dividing, zombie-like state—and activate &lt;strong&gt;dendritic cells&lt;/strong&gt; that train T-cells to recognize threats.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IL-2&lt;/strong&gt; fuels T-cell proliferation. It’s powerful, but dosing must be precise—too much can cause immune overdrive.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;oncolytic-viruses&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Oncolytic Viruses&lt;/h3&gt;
&lt;p&gt;Some therapies use modified viruses. These infect and &lt;strong&gt;burst tumor cells from the inside&lt;/strong&gt;. They also trigger a cascade of immune responses, drawing the body’s attention to the danger.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;antibody-based-therapies&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Antibody-Based Therapies&lt;/h3&gt;
&lt;p&gt;Antibodies aren’t just immune defenders—they’re delivery systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some bind to surface markers like &lt;strong&gt;HER2&lt;/strong&gt;, tagging tumors for destruction.&lt;/li&gt;
&lt;li&gt;Others carry toxic molecules inside cancer cells.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bispecific antibodies&lt;/strong&gt; physically link T-cells and tumors, ensuring targeted killing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;car-t-cell-therapy&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;CAR-T Cell Therapy&lt;/h3&gt;
&lt;p&gt;This is personalized warfare.&lt;/p&gt;
&lt;p&gt;Scientists extract a patient’s own T-cells, reprogram them to detect tumor antigens (like &lt;strong&gt;CD19&lt;/strong&gt; or &lt;strong&gt;BCMA&lt;/strong&gt;), and reinfuse them.&lt;/p&gt;
&lt;p&gt;In blood cancers, it’s transformative. In solid tumors, challenges like the tumor microenvironment remain—but progress is rapid.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;resistance-is-real&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Resistance Is Real&lt;/h2&gt;
&lt;p&gt;Cancer mutates. It finds backdoors. It learns.&lt;/p&gt;
&lt;p&gt;Some of its tricks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JAK/STAT mutations&lt;/strong&gt;: disrupt immune signaling&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNA repair upregulation&lt;/strong&gt;: helps survive chemotherapy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Glutathione enzymes&lt;/strong&gt;: detoxify otherwise lethal compounds&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To counter this, scientists are developing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Epigenetic modulators&lt;/strong&gt;: reverse silencing of tumor suppressors&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Molecular glues&lt;/strong&gt;: force toxic protein degradation by hijacking cellular trash systems&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Protein stabilizers&lt;/strong&gt;: restore function to damaged genes like &lt;strong&gt;p53&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;why-combination-matters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why Combination Matters&lt;/h2&gt;
&lt;p&gt;No single treatment is enough anymore.&lt;/p&gt;
&lt;p&gt;Smart therapies now &lt;strong&gt;combine multiple mechanisms&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chemotherapy paired with immune checkpoint inhibitors exposes new antigens&lt;/li&gt;
&lt;li&gt;CDK4/6 inhibition can slow tumor growth and &lt;strong&gt;increase immune infiltration&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Oncolytic viruses plus cytokine therapy create a multi-layered immune response&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result is synergy: targeting cancer from all sides, blocking every known escape route.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;taming-the-chaos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Taming the Chaos&lt;/h2&gt;
&lt;p&gt;Cancer biology is messy.&lt;/p&gt;
&lt;p&gt;So is raw data.&lt;/p&gt;
&lt;p&gt;Just like a biostatistician tidies a dataset in R—reshaping tables, standardizing columns, long-to-wide—you need structure to find signal in the noise.&lt;/p&gt;
&lt;p&gt;Understanding cancer requires &lt;strong&gt;tidy thinking&lt;/strong&gt;.
Every pathway, mutation, and immune interaction must be placed in context.
Only then can we make rational decisions in an irrational landscape.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;what-weve-learned&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What We’ve Learned&lt;/h2&gt;
&lt;p&gt;Suna’s story used to be rare.
Now it’s becoming common.
Because we stopped looking for a silver bullet—and started building an arsenal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key concepts to remember:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Checkpoint inhibition&lt;/strong&gt; (PD-1, CTLA-4) removes immune brakes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cytokines&lt;/strong&gt; like interferons and IL-2 fuel anti-tumor immunity&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Oncolytic viruses&lt;/strong&gt; and &lt;strong&gt;CAR-T cells&lt;/strong&gt; bring new ways to kill tumors&lt;/li&gt;
&lt;li&gt;Resistance arises fast—combination therapy is critical&lt;/li&gt;
&lt;li&gt;Clear biological insight depends on structure and tidy thinking&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The best book for cancer biology is “The Biology of Cancer” by Robert Weinberg.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/biolog_of_cancer.jpg&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Bioinformatics in the age of AI</title>
      <link>/talk/2025-eruprime-podcast/</link>
      <pubDate>Thu, 12 Jun 2025 12:00:00 +0000</pubDate>
      
      <guid>/talk/2025-eruprime-podcast/</guid>
      <description>&lt;p&gt;podcast with Euprime: Bioinformatics in the age of AI.&lt;/p&gt;

&lt;p&gt;The youtube recording is at &lt;a href=&#34;https://www.youtube.com/watch?v=6PyZoSdvzZU&amp;quot;&#34; target=&#34;_blank&#34;&gt;https://www.youtube.com/watch?v=6PyZoSdvzZU&amp;quot;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to calculate partial correlation controlling cancer types</title>
      <link>/post/partial-cor/</link>
      <pubDate>Thu, 22 May 2025 00:00:00 +0000</pubDate>
      
      <guid>/post/partial-cor/</guid>
      <description>&lt;p&gt;&lt;strong&gt;To not miss a post like this, sign up for my &lt;a href=&#34;https://divingintogeneticsandgenomics.ck.page/profile&#34;&gt;newsletter&lt;/a&gt; to learn computational
biology and bioinformatics.&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;what-is-partial-correlation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What is partial correlation&lt;/h3&gt;
&lt;p&gt;Partial correlation measures the relationship between two variables while controlling for the effect of one or more other variables.&lt;/p&gt;
&lt;p&gt;Suppose you want to know how X and Y are related, independent of how both are influenced by Z. Partial correlation helps answer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If we remove the influence of Z, is there still a connection between X and Y?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What does it have to do with Bioinformatics?&lt;/p&gt;
&lt;p&gt;You are studying the relationship between two genes:&lt;/p&gt;
&lt;p&gt;Gene A and Gene B
You observe a high correlation between their expression levels across many samples.&lt;/p&gt;
&lt;p&gt;But… both genes might be regulated by Transcription Factor X.&lt;/p&gt;
&lt;p&gt;So, is the correlation between Gene A and Gene B direct, or is it just because both are influenced by TF X?&lt;/p&gt;
&lt;p&gt;Use partial correlation to test the relationship between Gene A and Gene B, controlling for TF X.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;a-dummy-example-in-calculating-pearson-correlation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A dummy example in calculating pearson correlation&lt;/h2&gt;
&lt;p&gt;It is easy to calculate correlation in R with the &lt;code&gt;cor&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;To calculate partial correlation, we will turn to linear regression. What’s the relationship
of linear regression with correlation?&lt;/p&gt;
&lt;p&gt;I encourage everyone read this &lt;a href=&#34;https://lindeloev.github.io/tests-as-linear/&#34;&gt;Common statistical tests are linear models&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It shows the linear models underlying common parametric and “non-parametric” tests.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I will walk you through an example in the link above:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load packages for data handling and plotting
library(tidyverse)
library(patchwork)
library(broom) # tidy model output
library(kableExtra) # nice table

# Reproducible &amp;quot;random&amp;quot; results
set.seed(123)

# Generate normal data with known parameters
rnorm_fixed&amp;lt;- function(N, mu = 0, sd = 1) scale(rnorm(N)) * sd + mu

y&amp;lt;- c(rnorm(15), exp(rnorm(15)), runif(20, min = -3, max = 0))  # Almost zero mean, not normal

x&amp;lt;- rnorm_fixed(50, mu = 0, sd = 1)  # Used in correlation where this is on x-axis

y2&amp;lt;- x * 2 + rnorm(50)

# Long format data with indicator
value = c(y, y2)
group = rep(c(&amp;#39;y1&amp;#39;, &amp;#39;y2&amp;#39;), each = 50)

value&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt;   [1] -0.56047565 -0.23017749  1.55870831  0.07050839  0.12928774  1.71506499
#&amp;gt;   [7]  0.46091621 -1.26506123 -0.68685285 -0.44566197  1.22408180  0.35981383
#&amp;gt;  [13]  0.40077145  0.11068272 -0.55584113  5.97099235  1.64518111  0.13992942
#&amp;gt;  [19]  2.01648501  0.62326006  0.34375582  0.80414561  0.35843625  0.48244361
#&amp;gt;  [25]  0.53524041  0.18513068  2.31124663  1.16575986  0.32041542  3.50368377
#&amp;gt;  [31] -1.00465442 -2.71547802 -1.84809109 -2.17684907 -0.55607988 -1.65445098
#&amp;gt;  [37] -0.56980694 -0.56283147 -0.61697304 -1.68050494 -0.73657452 -1.11233661
#&amp;gt;  [43] -0.86945280 -2.99812568 -1.57405028 -2.33964334 -1.86055039 -1.16168699
#&amp;gt;  [49] -1.94460627 -2.66659373 -0.68291806 -0.04276485 -2.70999814  4.07998775
#&amp;gt;  [55]  3.92608432 -3.23176985  1.16150604  0.36461222  1.37554546 -1.33991208
#&amp;gt;  [61] -0.27327874  0.06561465 -0.46989453  2.57602440 -1.58258384  3.20820029
#&amp;gt;  [67] -4.36535571 -0.49221693 -0.23172931  1.27279542  0.14340372 -0.63955336
#&amp;gt;  [73] -2.48836915 -2.45402352 -1.99769497  0.85022079  0.97729907 -0.65016344
#&amp;gt;  [79]  1.07879359  3.41875068 -1.10469580 -6.22321486  1.62403278 -1.96482688
#&amp;gt;  [85]  0.18237357  1.50685612 -0.52711916 -2.77116144 -0.68528078 -0.50858194
#&amp;gt;  [91]  1.32977539  1.18283073 -0.91275131  0.88646473 -2.67243128  1.74339325
#&amp;gt;  [97]  0.85705167  1.58252482  1.05483796  0.98965858&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# x and y2 are highly correlated 
data.frame(x=x, y=y2) %&amp;gt;%
        ggplot(aes(x=x, y =y2)) +
        geom_point() +
        geom_smooth(method=&amp;#39;lm&amp;#39;) +
        theme_minimal(base_size = 14)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2025-05-22_partial_correlation_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# x and y are not correlated
data.frame(x=x, y=y) %&amp;gt;%
        ggplot(aes(x=x, y =y)) +
        geom_point() +
        geom_smooth(method=&amp;#39;lm&amp;#39;) +
        theme_minimal(base_size = 14)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2025-05-22_partial_correlation_files/figure-html/unnamed-chunk-3-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s calculate the correlation and p-value&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# use cor.test
a&amp;lt;- cor.test(y, x, method = &amp;quot;pearson&amp;quot;) # Built-in

a &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; 
#&amp;gt; 	Pearson&amp;#39;s product-moment correlation
#&amp;gt; 
#&amp;gt; data:  y and x
#&amp;gt; t = 1.0303, df = 48, p-value = 0.308
#&amp;gt; alternative hypothesis: true correlation is not equal to 0
#&amp;gt; 95 percent confidence interval:
#&amp;gt;  -0.1368577  0.4087073
#&amp;gt; sample estimates:
#&amp;gt;       cor 
#&amp;gt; 0.1470934&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy(a) %&amp;gt;%
  kable(digits = 3, 
        caption = &amp;quot;Correlation Test Results&amp;quot;,
        col.names = c(&amp;quot;Estimate&amp;quot;, &amp;quot;Statistic&amp;quot;, &amp;quot;p-value&amp;quot;, &amp;quot;Parameter&amp;quot;, 
                     &amp;quot;Lower CI&amp;quot;, &amp;quot;Upper CI&amp;quot;, &amp;quot;Method&amp;quot;, &amp;quot;Alternative&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:unnamed-chunk-4&#34;&gt;Table 1: &lt;/span&gt;Correlation Test Results&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width=&#34;8%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;7%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;8%&#34; /&gt;
&lt;col width=&#34;8%&#34; /&gt;
&lt;col width=&#34;35%&#34; /&gt;
&lt;col width=&#34;11%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;Estimate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Statistic&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p-value&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Parameter&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Lower CI&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Upper CI&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Method&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Alternative&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0.147&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.308&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.137&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.409&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pearson’s product-moment correlation&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;two.sided&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## use linear model
b&amp;lt;- lm(y ~ 1 + x) # Equivalent linear model: y = Beta0*1 + Beta1*x


# Create a nice table
tidy(b) %&amp;gt;%
  kable(digits = 3, 
        caption = &amp;quot;Linear Model Results&amp;quot;,
        col.names = c(&amp;quot;Term&amp;quot;, &amp;quot;Estimate&amp;quot;, &amp;quot;Std Error&amp;quot;, &amp;quot;t-statistic&amp;quot;, &amp;quot;p-value&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:unnamed-chunk-4&#34;&gt;Table 1: &lt;/span&gt;Linear Model Results&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Term&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Estimate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Std Error&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;t-statistic&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p-value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;(Intercept)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.159&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.231&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.494&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;x&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.241&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.233&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.030&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.308&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The p-value is the same (p = 0.308), but the coefficient is not (0.147 vs 0.241).&lt;/p&gt;
&lt;p&gt;It turns out, we need to standardize x and y to get the same correlation coefficient.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# need to scale to get the same correlation coefficient
c&amp;lt;- lm(scale(y) ~ 1 + scale(x))

tidy(c) %&amp;gt;%
  kable(digits = 3, 
        caption = &amp;quot;Linear Model Results&amp;quot;,
        col.names = c(&amp;quot;Term&amp;quot;, &amp;quot;Estimate&amp;quot;, &amp;quot;Std Error&amp;quot;, &amp;quot;t-statistic&amp;quot;, &amp;quot;p-value&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:unnamed-chunk-5&#34;&gt;Table 2: &lt;/span&gt;Linear Model Results&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Term&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Estimate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Std Error&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;t-statistic&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p-value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;(Intercept)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.141&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;scale(x)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.147&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.143&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.308&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now, we get the same 0.147 of the coefficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;why-need-to-standardize-it-to-get-the-right-correlation-coefficient&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why need to standardize it to get the right correlation coefficient&lt;/h2&gt;
&lt;div id=&#34;pearsons-correlation-coefficient&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Pearson’s Correlation Coefficient&lt;/h3&gt;
&lt;p&gt;The formula for Pearson’s correlation coefficient (&lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;) is:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
r = \frac{\sum_{i=1}^{n} (x_i - \bar{x})(y_i - \bar{y})}
         {\sqrt{\sum_{i=1}^{n} (x_i - \bar{x})^2} \sqrt{\sum_{i=1}^{n} (y_i - \bar{y})^2}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;regression-slope-for-standardized-variables&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Regression Slope for Standardized Variables&lt;/h3&gt;
&lt;p&gt;When &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; are standardized to &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt;-scores:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
x_{std} = \frac{x - \bar{x}}{SD(x)}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
y_{std} = \frac{y - \bar{y}}{SD(y)}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The regression slope (&lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;) is:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\beta = \frac{\sum_{i=1}^{n} x_{std,i} \, y_{std,i}}{\sum_{i=1}^{n} x_{std,i}^2}
\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;proof-of-equivalence&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Proof of Equivalence&lt;/h3&gt;
&lt;p&gt;Since standardized variables have &lt;span class=&#34;math inline&#34;&gt;\(SD(x_{std}) = SD(y_{std}) = 1\)&lt;/span&gt;,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\sum_{i=1}^{n} x_{std,i}^2 = n
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\beta = \frac{\sum_{i=1}^{n} x_{std,i} \, y_{std,i}}{n}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Expanding &lt;span class=&#34;math inline&#34;&gt;\(x_{std}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(y_{std}\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\beta = \frac{1}{n} \cdot \frac{\sum_{i=1}^{n} (x_i - \bar{x})(y_i - \bar{y})}{SD(x) \cdot SD(y)}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Therefore,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\beta = r
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now, let’s calculate the pairs of x and y1 which are significantly correlated:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a2&amp;lt;- cor.test(y2, x, method = &amp;quot;pearson&amp;quot;) # Built-in

a2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; 
#&amp;gt; 	Pearson&amp;#39;s product-moment correlation
#&amp;gt; 
#&amp;gt; data:  y2 and x
#&amp;gt; t = 13.164, df = 48, p-value &amp;lt; 2.2e-16
#&amp;gt; alternative hypothesis: true correlation is not equal to 0
#&amp;gt; 95 percent confidence interval:
#&amp;gt;  0.8048173 0.9333683
#&amp;gt; sample estimates:
#&amp;gt;       cor 
#&amp;gt; 0.8849249&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy(a2) %&amp;gt;%
  kable(digits = 3, 
        caption = &amp;quot;Correlation Test Results&amp;quot;,
        col.names = c(&amp;quot;Estimate&amp;quot;, &amp;quot;Statistic&amp;quot;, &amp;quot;p-value&amp;quot;, &amp;quot;Parameter&amp;quot;, 
                     &amp;quot;Lower CI&amp;quot;, &amp;quot;Upper CI&amp;quot;, &amp;quot;Method&amp;quot;, &amp;quot;Alternative&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:unnamed-chunk-6&#34;&gt;Table 3: &lt;/span&gt;Correlation Test Results&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width=&#34;8%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;7%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;8%&#34; /&gt;
&lt;col width=&#34;8%&#34; /&gt;
&lt;col width=&#34;35%&#34; /&gt;
&lt;col width=&#34;11%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;Estimate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Statistic&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p-value&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Parameter&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Lower CI&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Upper CI&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Method&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Alternative&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0.885&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.164&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.805&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.933&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pearson’s product-moment correlation&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;two.sided&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;correlation of 0.885 with a p value of 0.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## use linear model
b2&amp;lt;- lm(y2 ~ 1 + x) # Equivalent linear model: y = Beta0*1 + Beta1*x


# Create a nice table
tidy(b2) %&amp;gt;%
  kable(digits = 3, 
        caption = &amp;quot;Linear Model Results&amp;quot;,
        col.names = c(&amp;quot;Term&amp;quot;, &amp;quot;Estimate&amp;quot;, &amp;quot;Std Error&amp;quot;, &amp;quot;t-statistic&amp;quot;, &amp;quot;p-value&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:unnamed-chunk-7&#34;&gt;Table 4: &lt;/span&gt;Linear Model Results&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Term&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Estimate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Std Error&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;t-statistic&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p-value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;(Intercept)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.072&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.136&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.526&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.601&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;x&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.811&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.138&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.164&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# need to scale to get the same correlation coefficient
c2&amp;lt;- lm(scale(y2) ~ 1 + scale(x))

tidy(c2) %&amp;gt;%
  kable(digits = 3, 
        caption = &amp;quot;Linear Model Results&amp;quot;,
        col.names = c(&amp;quot;Term&amp;quot;, &amp;quot;Estimate&amp;quot;, &amp;quot;Std Error&amp;quot;, &amp;quot;t-statistic&amp;quot;, &amp;quot;p-value&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:unnamed-chunk-8&#34;&gt;Table 5: &lt;/span&gt;Linear Model Results&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Term&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Estimate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Std Error&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;t-statistic&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p-value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;(Intercept)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.067&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;scale(x)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.885&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.067&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.164&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;we get the same coefficient of &lt;code&gt;0.885&lt;/code&gt; and p-value of 0.&lt;/p&gt;
&lt;p&gt;It is very satisfying to see we get the same results using different methods.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;a-practical-example-in-calculating-partial-correlation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A practical example in calculating partial correlation&lt;/h2&gt;
&lt;p&gt;Go to &lt;a href=&#34;https://depmap.org/portal/data_page/?tab=currentRelease&#34;&gt;Depmap&lt;/a&gt;
Download the CRISPR screening dependency data &lt;code&gt;CRISPRGeneEffect.csv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;CRISPRGeneEffect.csv&lt;/code&gt; file from DepMap contains results from genome-wide CRISPR-Cas9 knockout screens across hundreds of cancer cell lines, reporting how essential each gene is for cell survival. The gene effect scores, calculated using the CERES or Chronos algorithms, indicate the impact of knocking out each gene: &lt;strong&gt;lower scores mean a gene is more essential for that cell line’s viability&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This dataset enables researchers to identify cancer-specific genetic vulnerabilities and potential therapeutic targets by showing which genes are critical for the survival of different cancer types.&lt;/p&gt;
&lt;p&gt;The file is &amp;gt; 400MB.&lt;/p&gt;
&lt;p&gt;Also download the &lt;code&gt;Model.csv&lt;/code&gt; file which contains the metadata information (e.g, cancer type for each cell line)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)
library(dplyr)

#read in the data
crispr_score&amp;lt;- read_csv(&amp;quot;~/blog_data/CRISPRGeneEffect.csv&amp;quot;)

crispr_score[1:5, 1:5]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 5 × 5
#&amp;gt;   ...1       `A1BG (1)` `A1CF (29974)` `A2M (2)` `A2ML1 (144568)`
#&amp;gt;   &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;          &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;
#&amp;gt; 1 ACH-000001    -0.122         0.0426     0.0261          -0.148 
#&amp;gt; 2 ACH-000004    -0.0165       -0.0885    -0.0882          -0.0412
#&amp;gt; 3 ACH-000005    -0.185         0.00330    0.161            0.0862
#&amp;gt; 4 ACH-000007    -0.0719       -0.114      0.0829           0.0996
#&amp;gt; 5 ACH-000009    -0.0192       -0.135      0.0603           0.0766&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to clean up the column names. remove the parentheses and the ENTREZE ID (numbers).&lt;/p&gt;
&lt;p&gt;NOTE: this type of regular expression is a perfect question for &lt;code&gt;LLM&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crispr_score&amp;lt;- crispr_score %&amp;gt;%
        dplyr::rename(ModelID = `...1`) %&amp;gt;%
        rename_with(~str_trim(str_remove(.x, &amp;quot; \\(.*\\)$&amp;quot;)), -1)

crispr_score[1:5, 1:5]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 5 × 5
#&amp;gt;   ModelID       A1BG     A1CF     A2M   A2ML1
#&amp;gt;   &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
#&amp;gt; 1 ACH-000001 -0.122   0.0426   0.0261 -0.148 
#&amp;gt; 2 ACH-000004 -0.0165 -0.0885  -0.0882 -0.0412
#&amp;gt; 3 ACH-000005 -0.185   0.00330  0.161   0.0862
#&amp;gt; 4 ACH-000007 -0.0719 -0.114    0.0829  0.0996
#&amp;gt; 5 ACH-000009 -0.0192 -0.135    0.0603  0.0766&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;meta&amp;lt;- read_csv(&amp;quot;~/blog_data/Model.csv&amp;quot;)
head(meta)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 6 × 47
#&amp;gt;   ModelID    PatientID CellLineName StrippedCellLineName DepmapModelType
#&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;                &amp;lt;chr&amp;gt;          
#&amp;gt; 1 ACH-000001 PT-gj46wT NIH:OVCAR-3  NIHOVCAR3            HGSOC          
#&amp;gt; 2 ACH-000002 PT-5qa3uk HL-60        HL60                 AML            
#&amp;gt; 3 ACH-000003 PT-puKIyc CACO2        CACO2                COAD           
#&amp;gt; 4 ACH-000004 PT-q4K2cp HEL          HEL                  AML            
#&amp;gt; 5 ACH-000005 PT-q4K2cp HEL 92.1.7   HEL9217              AML            
#&amp;gt; 6 ACH-000006 PT-ej13Dz MONO-MAC-6   MONOMAC6             AMOL           
#&amp;gt; # ℹ 42 more variables: OncotreeLineage &amp;lt;chr&amp;gt;, OncotreePrimaryDisease &amp;lt;chr&amp;gt;,
#&amp;gt; #   OncotreeSubtype &amp;lt;chr&amp;gt;, OncotreeCode &amp;lt;chr&amp;gt;, PatientSubtypeFeatures &amp;lt;chr&amp;gt;,
#&amp;gt; #   RRID &amp;lt;chr&amp;gt;, Age &amp;lt;dbl&amp;gt;, AgeCategory &amp;lt;chr&amp;gt;, Sex &amp;lt;chr&amp;gt;, PatientRace &amp;lt;chr&amp;gt;,
#&amp;gt; #   PrimaryOrMetastasis &amp;lt;chr&amp;gt;, SampleCollectionSite &amp;lt;chr&amp;gt;, SourceType &amp;lt;chr&amp;gt;,
#&amp;gt; #   SourceDetail &amp;lt;chr&amp;gt;, CatalogNumber &amp;lt;chr&amp;gt;, ModelType &amp;lt;chr&amp;gt;,
#&amp;gt; #   TissueOrigin &amp;lt;lgl&amp;gt;, ModelDerivationMaterial &amp;lt;chr&amp;gt;, ModelTreatment &amp;lt;chr&amp;gt;,
#&amp;gt; #   PatientTreatmentStatus &amp;lt;chr&amp;gt;, PatientTreatmentType &amp;lt;chr&amp;gt;, …&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(meta$OncotreeLineage)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; 
#&amp;gt;             Adrenal Gland          Ampulla of Vater             B lymphoblast 
#&amp;gt;                         2                         4                         1 
#&amp;gt;             Biliary Tract     Bladder/Urinary Tract                      Bone 
#&amp;gt;                        46                        39                        90 
#&amp;gt;                     Bowel                    Breast                    Cervix 
#&amp;gt;                        99                        96                        25 
#&amp;gt;                 CNS/Brain                 Embryonal         Esophagus/Stomach 
#&amp;gt;                       125                         1                       103 
#&amp;gt;                       Eye                Fibroblast                      Hair 
#&amp;gt;                        24                        42                         2 
#&amp;gt;             Head and Neck                    Kidney                     Liver 
#&amp;gt;                        95                        73                        29 
#&amp;gt;                      Lung                  Lymphoid                    Muscle 
#&amp;gt;                       260                       260                         5 
#&amp;gt;                   Myeloid                    Normal                     Other 
#&amp;gt;                        88                        13                         2 
#&amp;gt;      Ovary/Fallopian Tube                  Pancreas Peripheral Nervous System 
#&amp;gt;                        75                        68                        60 
#&amp;gt;                    Pleura                  Prostate                      Skin 
#&amp;gt;                        36                        15                       149 
#&amp;gt;               Soft Tissue                    Testis                   Thyroid 
#&amp;gt;                        86                        12                        25 
#&amp;gt;                    Uterus              Vulva/Vagina 
#&amp;gt;                        44                         5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# subset only the breast cancer cell line
breast_meta&amp;lt;- meta %&amp;gt;%
        select(ModelID, OncotreeLineage) %&amp;gt;%
        mutate(breast = case_when(
                OncotreeLineage == &amp;quot;Breast&amp;quot; ~ &amp;quot;yes&amp;quot;,
                TRUE ~ &amp;quot;no&amp;quot;
        ))


crispr_all&amp;lt;- inner_join(meta, crispr_score)


crispr_all&amp;lt;- crispr_all %&amp;gt;%
        mutate(breast = case_when(
                OncotreeLineage == &amp;quot;Breast&amp;quot; ~ &amp;quot;yes&amp;quot;,
                TRUE ~ &amp;quot;no&amp;quot;
        ))



ggplot(crispr_all,  aes(x= FOXA1, y= ESR1)) +
        geom_point(aes(color = breast)) +
        geom_smooth(method=&amp;#39;lm&amp;#39;, formula= y~x) +
        facet_wrap(~breast) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2025-05-22_partial_correlation_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;
It looks like the FOXA1 and ESR1 CRISPR dependency score are more correlated in Breast cancer.&lt;/p&gt;
&lt;p&gt;Let’s calculate the correlation and p-value&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor.test(crispr_all$FOXA1[crispr_all$breast == &amp;quot;yes&amp;quot;], crispr_all$ESR1[crispr_all$breast == &amp;quot;yes&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; 
#&amp;gt; 	Pearson&amp;#39;s product-moment correlation
#&amp;gt; 
#&amp;gt; data:  crispr_all$FOXA1[crispr_all$breast == &amp;quot;yes&amp;quot;] and crispr_all$ESR1[crispr_all$breast == &amp;quot;yes&amp;quot;]
#&amp;gt; t = 4.3022, df = 51, p-value = 7.658e-05
#&amp;gt; alternative hypothesis: true correlation is not equal to 0
#&amp;gt; 95 percent confidence interval:
#&amp;gt;  0.2855579 0.6900675
#&amp;gt; sample estimates:
#&amp;gt;       cor 
#&amp;gt; 0.5160227&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor.test(crispr_all$FOXA1, crispr_all$ESR1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; 
#&amp;gt; 	Pearson&amp;#39;s product-moment correlation
#&amp;gt; 
#&amp;gt; data:  crispr_all$FOXA1 and crispr_all$ESR1
#&amp;gt; t = 14.076, df = 1176, p-value &amp;lt; 2.2e-16
#&amp;gt; alternative hypothesis: true correlation is not equal to 0
#&amp;gt; 95 percent confidence interval:
#&amp;gt;  0.3297560 0.4275629
#&amp;gt; sample estimates:
#&amp;gt;       cor 
#&amp;gt; 0.3797201&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;All cell lines (r = 0.38): This includes the confounding effect of cancer type. Different cancer types have different baseline dependencies for both FOXA1 and ESR1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Breast cancer only (r = 0.52): This removes the cancer type confounding, showing the “true” relationship within a homogeneous cancer type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The increase from 0.38 to 0.52 suggests that cancer type was acting as a confounding variable.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;lets-use-linear-model-to-calculate-correlation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Let’s use linear model to calculate correlation&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# need to scale to get the same correlation coefficient
lm_cor &amp;lt;- lm(scale(crispr_all$ESR1) ~ 1 + scale(crispr_all$FOXA1))

summary(lm_cor)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; 
#&amp;gt; Call:
#&amp;gt; lm(formula = scale(crispr_all$ESR1) ~ 1 + scale(crispr_all$FOXA1))
#&amp;gt; 
#&amp;gt; Residuals:
#&amp;gt;     Min      1Q  Median      3Q     Max 
#&amp;gt; -7.7928 -0.3632  0.0598  0.4546  3.5335 
#&amp;gt; 
#&amp;gt; Coefficients:
#&amp;gt;                          Estimate Std. Error t value Pr(&amp;gt;|t|)    
#&amp;gt; (Intercept)             4.703e-17  2.697e-02    0.00        1    
#&amp;gt; scale(crispr_all$FOXA1) 3.797e-01  2.698e-02   14.08   &amp;lt;2e-16 ***
#&amp;gt; ---
#&amp;gt; Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
#&amp;gt; 
#&amp;gt; Residual standard error: 0.9255 on 1176 degrees of freedom
#&amp;gt; Multiple R-squared:  0.1442,	Adjusted R-squared:  0.1435 
#&amp;gt; F-statistic: 198.1 on 1 and 1176 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# a nice table
tidy(lm_cor) %&amp;gt;%
  kable(digits = 3, 
        caption = &amp;quot;Linear Model Results&amp;quot;,
        col.names = c(&amp;quot;Term&amp;quot;, &amp;quot;Estimate&amp;quot;, &amp;quot;Std Error&amp;quot;, &amp;quot;t-statistic&amp;quot;, &amp;quot;p-value&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:unnamed-chunk-13&#34;&gt;Table 6: &lt;/span&gt;Linear Model Results&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Term&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Estimate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Std Error&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;t-statistic&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p-value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;(Intercept)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.027&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;scale(crispr_all$FOXA1)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.38&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.027&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.076&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The results is the same as &lt;code&gt;cor.test(crispr_all$FOXA1, crispr_all$ESR1)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-the-cancer-type-as-a-covariate-to-calculate-partial-correlation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;adding the cancer type as a covariate to calculate partial correlation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm_cor_partial &amp;lt;- lm(scale(crispr_all$ESR1) ~ scale(crispr_all$FOXA1) + crispr_all$OncotreeLineage)

unique(crispr_all$OncotreeLineage) %&amp;gt;% sort()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt;  [1] &amp;quot;Adrenal Gland&amp;quot;             &amp;quot;Ampulla of Vater&amp;quot;         
#&amp;gt;  [3] &amp;quot;Biliary Tract&amp;quot;             &amp;quot;Bladder/Urinary Tract&amp;quot;    
#&amp;gt;  [5] &amp;quot;Bone&amp;quot;                      &amp;quot;Bowel&amp;quot;                    
#&amp;gt;  [7] &amp;quot;Breast&amp;quot;                    &amp;quot;Cervix&amp;quot;                   
#&amp;gt;  [9] &amp;quot;CNS/Brain&amp;quot;                 &amp;quot;Esophagus/Stomach&amp;quot;        
#&amp;gt; [11] &amp;quot;Eye&amp;quot;                       &amp;quot;Fibroblast&amp;quot;               
#&amp;gt; [13] &amp;quot;Head and Neck&amp;quot;             &amp;quot;Kidney&amp;quot;                   
#&amp;gt; [15] &amp;quot;Liver&amp;quot;                     &amp;quot;Lung&amp;quot;                     
#&amp;gt; [17] &amp;quot;Lymphoid&amp;quot;                  &amp;quot;Myeloid&amp;quot;                  
#&amp;gt; [19] &amp;quot;Other&amp;quot;                     &amp;quot;Ovary/Fallopian Tube&amp;quot;     
#&amp;gt; [21] &amp;quot;Pancreas&amp;quot;                  &amp;quot;Peripheral Nervous System&amp;quot;
#&amp;gt; [23] &amp;quot;Pleura&amp;quot;                    &amp;quot;Prostate&amp;quot;                 
#&amp;gt; [25] &amp;quot;Skin&amp;quot;                      &amp;quot;Soft Tissue&amp;quot;              
#&amp;gt; [27] &amp;quot;Testis&amp;quot;                    &amp;quot;Thyroid&amp;quot;                  
#&amp;gt; [29] &amp;quot;Uterus&amp;quot;                    &amp;quot;Vulva/Vagina&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have 30 lineages, and by default the reference group is &lt;code&gt;Adrenal Gland&lt;/code&gt; which is the first sorted alphabetically.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(lm_cor_partial)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; 
#&amp;gt; Call:
#&amp;gt; lm(formula = scale(crispr_all$ESR1) ~ scale(crispr_all$FOXA1) + 
#&amp;gt;     crispr_all$OncotreeLineage)
#&amp;gt; 
#&amp;gt; Residuals:
#&amp;gt;     Min      1Q  Median      3Q     Max 
#&amp;gt; -7.1693 -0.3711  0.0329  0.4560  3.5215 
#&amp;gt; 
#&amp;gt; Coefficients:
#&amp;gt;                                                     Estimate Std. Error t value
#&amp;gt; (Intercept)                                           1.2382     0.9029   1.371
#&amp;gt; scale(crispr_all$FOXA1)                               0.3021     0.0299  10.104
#&amp;gt; crispr_all$OncotreeLineageAmpulla of Vater           -0.9696     1.0094  -0.961
#&amp;gt; crispr_all$OncotreeLineageBiliary Tract              -1.2050     0.9157  -1.316
#&amp;gt; crispr_all$OncotreeLineageBladder/Urinary Tract      -1.0857     0.9161  -1.185
#&amp;gt; crispr_all$OncotreeLineageBone                       -1.1071     0.9126  -1.213
#&amp;gt; crispr_all$OncotreeLineageBowel                      -1.0521     0.9100  -1.156
#&amp;gt; crispr_all$OncotreeLineageBreast                     -2.1645     0.9131  -2.371
#&amp;gt; crispr_all$OncotreeLineageCervix                     -0.8041     0.9276  -0.867
#&amp;gt; crispr_all$OncotreeLineageCNS/Brain                  -1.3465     0.9079  -1.483
#&amp;gt; crispr_all$OncotreeLineageEsophagus/Stomach          -1.1176     0.9094  -1.229
#&amp;gt; crispr_all$OncotreeLineageEye                        -1.3322     0.9325  -1.429
#&amp;gt; crispr_all$OncotreeLineageFibroblast                 -0.8213     1.2769  -0.643
#&amp;gt; crispr_all$OncotreeLineageHead and Neck              -1.1233     0.9087  -1.236
#&amp;gt; crispr_all$OncotreeLineageKidney                     -1.4100     0.9161  -1.539
#&amp;gt; crispr_all$OncotreeLineageLiver                      -1.0757     0.9215  -1.167
#&amp;gt; crispr_all$OncotreeLineageLung                       -1.2399     0.9064  -1.368
#&amp;gt; crispr_all$OncotreeLineageLymphoid                   -1.1707     0.9078  -1.290
#&amp;gt; crispr_all$OncotreeLineageMyeloid                    -1.1257     0.9136  -1.232
#&amp;gt; crispr_all$OncotreeLineageOther                      -0.7691     1.2769  -0.602
#&amp;gt; crispr_all$OncotreeLineageOvary/Fallopian Tube       -1.6780     0.9105  -1.843
#&amp;gt; crispr_all$OncotreeLineagePancreas                   -1.1337     0.9124  -1.242
#&amp;gt; crispr_all$OncotreeLineagePeripheral Nervous System  -1.1941     0.9131  -1.308
#&amp;gt; crispr_all$OncotreeLineagePleura                     -1.0867     0.9241  -1.176
#&amp;gt; crispr_all$OncotreeLineageProstate                   -0.8901     0.9481  -0.939
#&amp;gt; crispr_all$OncotreeLineageSkin                       -1.0486     0.9090  -1.154
#&amp;gt; crispr_all$OncotreeLineageSoft Tissue                -1.2275     0.9129  -1.345
#&amp;gt; crispr_all$OncotreeLineageTestis                     -1.9009     0.9891  -1.922
#&amp;gt; crispr_all$OncotreeLineageThyroid                    -1.1388     0.9430  -1.208
#&amp;gt; crispr_all$OncotreeLineageUterus                     -1.2534     0.9161  -1.368
#&amp;gt; crispr_all$OncotreeLineageVulva/Vagina               -1.3165     1.1058  -1.191
#&amp;gt;                                                     Pr(&amp;gt;|t|)    
#&amp;gt; (Intercept)                                           0.1705    
#&amp;gt; scale(crispr_all$FOXA1)                               &amp;lt;2e-16 ***
#&amp;gt; crispr_all$OncotreeLineageAmpulla of Vater            0.3370    
#&amp;gt; crispr_all$OncotreeLineageBiliary Tract               0.1884    
#&amp;gt; crispr_all$OncotreeLineageBladder/Urinary Tract       0.2362    
#&amp;gt; crispr_all$OncotreeLineageBone                        0.2254    
#&amp;gt; crispr_all$OncotreeLineageBowel                       0.2479    
#&amp;gt; crispr_all$OncotreeLineageBreast                      0.0179 *  
#&amp;gt; crispr_all$OncotreeLineageCervix                      0.3862    
#&amp;gt; crispr_all$OncotreeLineageCNS/Brain                   0.1383    
#&amp;gt; crispr_all$OncotreeLineageEsophagus/Stomach           0.2193    
#&amp;gt; crispr_all$OncotreeLineageEye                         0.1534    
#&amp;gt; crispr_all$OncotreeLineageFibroblast                  0.5203    
#&amp;gt; crispr_all$OncotreeLineageHead and Neck               0.2167    
#&amp;gt; crispr_all$OncotreeLineageKidney                      0.1240    
#&amp;gt; crispr_all$OncotreeLineageLiver                       0.2433    
#&amp;gt; crispr_all$OncotreeLineageLung                        0.1716    
#&amp;gt; crispr_all$OncotreeLineageLymphoid                    0.1974    
#&amp;gt; crispr_all$OncotreeLineageMyeloid                     0.2182    
#&amp;gt; crispr_all$OncotreeLineageOther                       0.5471    
#&amp;gt; crispr_all$OncotreeLineageOvary/Fallopian Tube        0.0656 .  
#&amp;gt; crispr_all$OncotreeLineagePancreas                    0.2143    
#&amp;gt; crispr_all$OncotreeLineagePeripheral Nervous System   0.1912    
#&amp;gt; crispr_all$OncotreeLineagePleura                      0.2399    
#&amp;gt; crispr_all$OncotreeLineageProstate                    0.3481    
#&amp;gt; crispr_all$OncotreeLineageSkin                        0.2489    
#&amp;gt; crispr_all$OncotreeLineageSoft Tissue                 0.1790    
#&amp;gt; crispr_all$OncotreeLineageTestis                      0.0549 .  
#&amp;gt; crispr_all$OncotreeLineageThyroid                     0.2274    
#&amp;gt; crispr_all$OncotreeLineageUterus                      0.1715    
#&amp;gt; crispr_all$OncotreeLineageVulva/Vagina                0.2341    
#&amp;gt; ---
#&amp;gt; Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
#&amp;gt; 
#&amp;gt; Residual standard error: 0.9029 on 1147 degrees of freedom
#&amp;gt; Multiple R-squared:  0.2056,	Adjusted R-squared:  0.1848 
#&amp;gt; F-statistic: 9.896 on 30 and 1147 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Interpreting the linear model coefficients&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FOXA1 coefficient (scale(crispr_all$FOXA1) = 0.3021)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Meaning: For every 1 standard deviation increase in FOXA1 dependency score, ESR1 dependency score increases by 0.3021 standard deviations, controlling for cancer type.&lt;/p&gt;
&lt;p&gt;P-value &amp;lt; 2e-16: Highly significant relationship
This 0.3021 is your partial correlation coefficient between FOXA1 and ESR1, controlling for cancer type.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cancer type coefficients (e.g., Breast = -2.1645)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Meaning: Each coefficient represents the difference in ESR1 dependency (in standard deviations) between that cancer type and the reference cancer type (Adrenal Gland).&lt;/p&gt;
&lt;p&gt;Breast coefficient (-2.1645, p = 0.0179): Breast cancer cell lines have significantly lower ESR1 dependency scores (lower means more dependent) compared to the reference cancer type (Adrenal Gland), on average.&lt;/p&gt;
&lt;p&gt;Most other cancer types: Non-significant differences from the reference type.&lt;/p&gt;
&lt;p&gt;Biological interpretation:&lt;/p&gt;
&lt;p&gt;FOXA1 and ESR1 have a moderate positive partial correlation (0.30) across cancer types.&lt;/p&gt;
&lt;p&gt;This suggests these genes may be part of related pathways or have synthetic lethal relationships.&lt;/p&gt;
&lt;p&gt;Breast cancer shows even stronger co-dependency (0.53), which makes biological sense given the importance of estrogen signaling in breast cancer.&lt;/p&gt;
&lt;p&gt;The significant negative coefficient for breast cancer (-2.16) indicates breast cancers generally have lower ESR1 dependency scores overall.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-we-found-suggest&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What we found suggest&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FOXA1-ESR1 have genuine co-dependency (partial r = 0.30).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Breast cancer amplifies this relationship (r = 0.53 within breast).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cancer type was indeed confounding the raw correlation (0.37).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The relationship is biologically meaningful across cancer types, but particularly strong in breast cancer.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;other-usages-of-partial-correlation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other usages of partial correlation&lt;/h2&gt;
&lt;p&gt;Partial Correlation Improves Network Accuracy&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Eliminating Spurious Correlations
Problem: Standard Pearson/Spearman correlations detect both direct interactions and indirect relationships mediated by shared regulators or technical confounders (e.g., batch effects).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Solution: Partial correlation removes the linear effects of all other variables, revealing direct dependencies between gene pairs.&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Biological Validation
Studies show partial correlation networks:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Reduce false positives by 30-50% compared to correlation networks in cancer genomics
Align better with experimentally validated interactions (e.g., ChIP-seq/TF binding data).&lt;/p&gt;
&lt;p&gt;Further readings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pmc.ncbi.nlm.nih.gov/articles/PMC3332147/&#34;&gt;Partial correlation network analyses to detect altered gene interactions in human disease: using preeclampsia as a model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pmc.ncbi.nlm.nih.gov/articles/PMC4194134/&#34;&gt;Biological network inference using low order partial correlation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Multi-Omics Integration Strategy and Deep Diving into MOFA2</title>
      <link>/post/multiomics-mofa2/</link>
      <pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate>
      
      <guid>/post/multiomics-mofa2/</guid>
      <description>&lt;style&gt;
body {
text-align: justify}
&lt;/style&gt;
&lt;p&gt;Today’s guest blog post on multiOmics integration is written by &lt;a href=&#34;https://www.linkedin.com/in/aditiq/&#34;&gt;Aditi Qamra&lt;/a&gt; and edited by Tommy.&lt;/p&gt;
&lt;p&gt;If you want to do a guest posting in my blog which gets 30k views per month, feel free to contact me
on &lt;a href=&#34;https://www.linkedin.com/in/%F0%9F%8E%AF-ming-tommy-tang-40650014/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aditi is a senior data scientist working on biomarker discovery and early product development at Roche, using multimodal clinical and genomic data. She has a PhD and postdoc in epigenomics of solid tumors and enjoys upskilling herself in stats topics.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Multi-omic data collection and analysis is becoming increasingly routine in research and clinical settings. By collecting biological signals across different layers of regulation like gene expression, methylation, mutation, protein abundance etc., the intent is to infer higher order, often non-linear relationships that would be invisible in single-data views.&lt;/p&gt;
&lt;p&gt;In a &lt;a href=&#34;https://divingintogeneticsandgenomics.com/post/multi-omics-data-integration-a-case-study-with-transcriptomics-and-genomics-mutation-data/&#34;&gt;previous post&lt;/a&gt; on this topic, Tommy walked through the basics of multi-omic integration through an example integrating transcriptomics and mutation data using a linear factor analysis. While this was a great start, multiple methods have been published on this topic from classical multivariate stats to bayesian and graph based models.&lt;/p&gt;
&lt;div id=&#34;how-to-choose-the-right-method-for-your-data-and-question&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;How to choose the right method for your data and question?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The optimal multi-omic integration strategy depends on three things: the biological question, data type, and the objective of our analysis.&lt;/p&gt;
&lt;div id=&#34;start-with-the-biological-question&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Start with the biological question&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;What do we want to identify across different data modalities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shared programs: Are you looking for biological themes that echo across data types e.g. immune cell activation reflected in both gene expression and cytokine levels?&lt;/li&gt;
&lt;li&gt;Unique signals: Or do you need to tease out what one omic tells you that none of the others can?&lt;/li&gt;
&lt;li&gt;Does combining them improve ability to stratify patients or predict disease/treatment outcome&lt;/li&gt;
&lt;li&gt;And most often asked, what do they reveal together that they don’t individually?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clarifying this upfront helps determine whether you need an unsupervised factor model, a predictive classifier, or a mechanistic graph-based approach.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tommy’s NOTE: Read this paper by &lt;a href=&#34;https://pmc.ncbi.nlm.nih.gov/articles/PMC11949029/&#34;&gt;Vivek et al Leveraging complementary multi-omics data integration methods for mechanistic insights in kidney diseases&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They tested both &lt;code&gt;MOFA2&lt;/code&gt;(unsupervisied) and &lt;code&gt;DIABLO&lt;/code&gt; (supervised) for a pilot study in Chronic Kidney Disease.&lt;/p&gt;
&lt;p&gt;A new preprint from Vivek and the group: &lt;a href=&#34;https://www.medrxiv.org/content/10.1101/2025.05.12.25327328v1&#34;&gt;Multi-omics data integration from patients with carotid stenosis illuminates key molecular signatures of atherosclerotic instability&lt;/a&gt;.&lt;br /&gt;
&lt;a href=&#34;https://www.linkedin.com/posts/vivek-das-phd-m-sc-b1110b25_happy-to-share-our-latest-preprint-where-activity-7329763931097399298-VAk8/&#34;&gt;Linkedin Post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Those are good examples on how multi-omics data analysis is used in real-world applications!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;navigating-data-hurdles&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Navigating data hurdles&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The right tool should address the different data distributions and the practical challenges of collecting multi-omic data.&lt;/p&gt;
&lt;p&gt;Multi-omic datasets are rarely complete matrices. You might have RNA-seq for 200 samples, proteomics for 150, and methylation for only 180 of those, which needs methods that can support partial observations.&lt;/p&gt;
&lt;p&gt;Collected data modalities can also differ in&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sparsity (ATAC-seq vs RNA-seq)&lt;/li&gt;
&lt;li&gt;Noise (proteomics often suffers from batch effects and high levels of missingness)&lt;/li&gt;
&lt;li&gt;Biological resolution. RNA-seq typically collects data on 20-60K genes while methylation panels may only cover few thousand loci or ~55K regions for the &lt;a href=&#34;https://www.twistbioscience.com/resources/data-files/twist-human-methylome-panel-target-bed-file&#34;&gt;TWIST panel&lt;/a&gt;. 55K is the capture regions, and they contain ~8 Million CpG sites.&lt;/li&gt;
&lt;li&gt;Data distribution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A naive concatenation can drown true signal in the modality with the most features or create phantom clusters driven by batch differences.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tommy’s NOTE: &lt;a href=&#34;https://divingintogeneticsandgenomics.com/post/python-visium/&#34;&gt;The last blog post&lt;/a&gt; when integrating the spatial coordinates matrix and the gene expression matrix is a perfect example for this problem.&lt;/strong&gt;
&lt;img src=&#34;/img/figures/Fig04.png&#34; /&gt;
&lt;strong&gt;A simple z-score normalization for each data modality worked.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For more complex data, a robust method may be needed to normalize per data modality, learn modality-specific weights, or regularize appropriately (e.g., weighted PCA, MOFA2, DIABLO).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;interpretability-and-biological-plausibility&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Interpretability and Biological Plausibility&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Whatever the method, results must ultimately be biologically interpretable. This means, we should be able to map back our results to original features (genes, loci, proteins etc.) It is also important to avoid interpreting these statistically inferred patterns since most integration tools are designed to uncover correlations, not causal relationships between omics layers.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;orthogonal-validation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Orthogonal Validation&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Finally, we should always orthogonally validate findings to be able to trust the output of multi-omic methods e.g. Do results align with known biology, be validated through functional assays and/or generalize to other cohorts.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;list-of-available-multi-omic-tools&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;List of available multi-omic tools&lt;/h3&gt;
&lt;p&gt;Mike Love has an extensive list of multiomic tools categorized by type &lt;a href=&#34;https://github.com/mikelove/awesome-multi-omics&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This review &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/core/lw/2.0/html/tileshop_pmc/tileshop_pmc_inline.html?title=Click%20on%20image%20to%20zoom&amp;amp;p=PMC3&amp;amp;id=7003173_10.1177_1177932219899051-fig1.jpg&#34;&gt;paper&lt;/a&gt; also outlines tools split by method.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&#34;https://frontlinegenomics.com/a-guide-to-multi-omics-integration-strategies/&#34;&gt;blog post&lt;/a&gt; written by Matthew Higgs also outlines a comprehensive list of multi-omics integration tools.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;deep-diving-into-one-method-multi-omic-factor-analysis-mofa2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Deep diving into one method: Multi Omic Factor Analysis (MOFA2)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A frequently asked question when integrating multi-omic data is to identify underlying shared biological programs which are not directly measurable e.g. immune interactions in the tumor microenvironment which may be reflected across different immune and stromal cell proportions, gene expression and cytokine profiles.&lt;/p&gt;
&lt;p&gt;MOFA2 (Multi-Omics Factor Analysis) is a Bayesian probabilistic statistical framework designed for the unsupervised integration of multi-omic data to identify latent factors capturing sources of variation across multiple omics layers and is well suited to handle sparse and missing data.&lt;/p&gt;
&lt;p&gt;This was a lot of jargon - Let’s break it down:&lt;/p&gt;
&lt;div id=&#34;what-is-a-probabilistic-framework&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;What is a Probabilistic Framework&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Models like MOFA2 posit that the observed data i.e our collected data modalities is generated from a small number of latent factors, each with their feature-specific weights aka feature loadings, plus noise. But instead of estimating single fixed values for latent factors, feature loadings and noise, it treats them as random variables with probability distributions.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;why-use-probabilistic-modeling&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Why use Probabilistic Modeling&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;By modeling the data as probability distributions rather than fixed values, we naturally capture and quantify uncertainty and noise
It allows for specification of different distributions per data modality&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-are-latent-factors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;What are Latent Factors&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Latent factors are unobserved (hidden) variables that explain patterns of variation in your data. We can infer them from the data by looking for patterns of co-variation across samples and omic layers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE, read Tommy’s LinkedIn post &lt;a href=&#34;https://www.linkedin.com/posts/%F0%9F%8E%AF-ming-tommy-tang-40650014_what-the-heck-is-latent-space-if-pca-activity-7316086311013027841-kNUw&#34;&gt;explaining latent space&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Models like MOFA2 reduces the dimensionality of the data by identifying these latent factors. Each factor has a continuous distribution per sample as well as weight associated with the all the underlying features of the different data modalities that indicate how strongly they are influenced by each factor.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Observed data ≈ latent factors × weights + noise.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/img/figures/Fig01.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notice the factors are shared across all data modalities and weights are specific to each modality - This is what helps capture shared variation and while explaining how latent factors influence the features within each modality.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;why-bayesian&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Why Bayesian&lt;/strong&gt;?&lt;/h3&gt;
&lt;p&gt;MOFA2 is Bayesian because it uses Bayes’ theorem to infer how likely are different values of the latent factors and weights are, given the observed data. It places prior distributions on the unknown parameters and updates these priors using the observed data to infer posterior distributions via Bayes’ theorem.&lt;/p&gt;
&lt;p&gt;This is where we dive a bit deeper into the maths of MOFA2 (but intuitively):&lt;/p&gt;
&lt;p&gt;In Bayesian statistics -&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;We start with a guess about what the parameter might be—called the prior distribution&lt;/li&gt;
&lt;li&gt;Then we collect data and see how likely it is under various parameter values—this is the likelihood&lt;/li&gt;
&lt;li&gt;Finally we combine the prior and the likelihood to get an updated belief—the posterior distribution.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Mathematically:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/figures/Fig02.png&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;θ = Parameters you want to infer&lt;/li&gt;
&lt;li&gt;D = Observed data&lt;/li&gt;
&lt;li&gt;p(θ∣D) = posterior distribution, what we believe about θ after observing data&lt;/li&gt;
&lt;li&gt;p(D∣θ) = likelihood, the probability of observing D given specific θ&lt;/li&gt;
&lt;li&gt;p(θ) = prior, what we believed about θ before seeing data&lt;/li&gt;
&lt;li&gt;p(D) = evidence or marginal likelihood, the overall probability of data under all possible θ acts as a normalizing constant.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Extending this to MOFA2:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/figures/Fig03.png&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Prior&lt;/strong&gt;: The prior distribution p(factor, loadings..) reflects our initial beliefs about the latent factors and their associated weights.
For factors, MOFA2 assumes each latent factor has a normal distribution centered around zero, reflecting the idea that most factors might have little influence on the data, but some factors could be more influential.
For weights or factor loadings, sparsity-inducing priors (automatic relevance determination) are used which ensures not all features and not all factors are selected yielding simpler and more interpretable models.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Likelihood&lt;/strong&gt;: The likelihood function p(data|factors, loadings..) tells us how likely the observed data is, given a set of latent factors and their feature loadings. In MOFA2, user can specify each data modality as an appropriate distribution e.g. Gaussian likelihood, where the data is assumed to be normally distributed around the factors with some level of noise.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Posterior&lt;/strong&gt;: The posterior distribution p(factor, loadings.. ∣data ) is what we ultimately want to estimate. It gives us the updated belief about the latent factors and feature loadings after incorporating the observed data. The posterior distribution quantifies not just the “most likely” values of these parameters but also how uncertain we are about them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;But what about the p(data)&lt;/strong&gt; ?&lt;/p&gt;
&lt;p&gt;p(data) is the probability of the observed data under all possible settings of latent factors and loadings, weighted by how likely each setting is under the priors. To compute this, we would have to know every possible combination of latent variables and parameters, which is extremely computationally expensive. But without computing this, we cannot also compute the desired posterior according to the Bayes’ theorem (!) - So what should we do ?&lt;/p&gt;
&lt;p&gt;Instead of computing the true marginal likelihood (and hence the true posterior) exactly, MOFA2 uses variational inference to approximate it.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-variational-inference&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;What is Variational Inference&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Variational inference assumes that the true posterior distribution is too complex to work with directly. Instead, it approximates the posterior p(factor, loadings.. | data) by using a simpler family of distributions denoted by q(factor, loadings..), such as Gaussians, even though the true posterior may be much more complicated.&lt;/p&gt;
&lt;p&gt;It then optimizes the parameters of this simpler assumed distribution (means, variances) to make it overlap as much as possible with the true posterior.
At this point, you should stop and ask - “We don’t know the true posterior to begin with, how can we optimize?”&lt;/p&gt;
&lt;p&gt;The answer lies in the fact that the log of the marginal likelihood, log p(data), is a fixed quantity for a given model and dataset. It can be expressed as:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;log p(data)= ELBO + KL Divergence&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s walk through the new terms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ELBO (Evidence Lower Bound)&lt;/strong&gt; : A quantity that can be computed and optimized. It measures how well the approximating distribution explains the data while balancing complexity&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;KL divergence&lt;/strong&gt;: Measures the “distance” between the approximated posterior and the true posterior. This cannot be computed directly. It is always non negative. But critically, since log⁡p(data) is fixed, maximizing ELBO automatically minimizes the KL divergence — even though we never compute the KL divergence explicitly. Since KL Divergence is always non negative, ELBO is always going to be equal to or less than log p(data) i.e the true lower bound
Thus, variational inference lets us approximate the true posterior without needing to know it, by focusing entirely on maximizing the ELBO.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tommy’s NOTE: read this &lt;a href=&#34;https://mbernste.github.io/posts/vae/&#34;&gt;blog post by Matt B&lt;/a&gt; to understand how variational inference is used in variational autoEncoder. (Warning! mathematical equations heavy, Tommy can not process).&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-elbo&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;What is ELBO&lt;/strong&gt;&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ELBO = Data fit + Prior regularization - Complexity Control&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data Fit (Likelihood Term)&lt;/strong&gt;: How well your chosen latent factors and loadings “reconstruct” the observed omic measurements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We already know that MOFA2 treats every measurement in each data modality as the model’s predicted value (latent factors × loadings) plus some random noise. It then asks, “How far off is my prediction?” by computing a weighted squared error for each feature—features with more noise count less. Because MOFA2 assumes both its uncertainty and the noise are Gaussian, all those errors collapse into a simple formula that can be computed directly.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prior Regularization (Prior Term)&lt;/strong&gt;: How well the inferred factors and loadings stick to what you believed about them before seeing the data i.e the prior distributions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MOFA2 starts by assuming every latent factor and every feature loading “wants” to be zero. It treats each as a Gaussian centered at zero ( as we discussed earlier), then penalizes any inferred value that strays too far—more deviation means a bigger penalty. Because these penalties have simple formulas, MOFA2 can compute them exactly to keep most factors and weights small unless the data really demand otherwise.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Complexity Control (Entropy Term)&lt;/strong&gt;: Finally, MOFA2 makes sure it doesn’t get “too sure” about any factor or loading ie avoid overfitting.
It does this by rewarding a bit of spread in the approximate distribution. Remember, entropy of a distribution quantifies its spread: a very narrow, overconfident q has low entropy; a broad, uncertain q has high entropy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since MOFA2’s q(factor, loadings) is just a Gaussian, this “reward for uncertainty” is a simple function of its variances, so it can be calculated directly and helps prevent overfitting.&lt;/p&gt;
&lt;p&gt;Thus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data Fit pulls your solution toward explaining every wiggle in the data. This helps capturing the relevant biological variation present in the data.&lt;/li&gt;
&lt;li&gt;Prior Regularization pulls it back toward your initial beliefs (e.g., that most factors have small effects) and helps respecting prior structural assumptions (such as sparsity or centeredness around zero).&lt;/li&gt;
&lt;li&gt;Entropy makes sure you don’t clamp down too hard—letting the model stay appropriately uncertain.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By computing each of these in closed form (thanks to Gaussian choices), MOFA2 can efficiently optimize the ELBO and thus approximate the true posterior—all without ever having to tackle the intractable values.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;code-example&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Code example&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now that we have gone through the theory of MOFA2 in a top down approach in deep, lets cover a practical example. We will walk through specific code lines in &lt;a href=&#34;https://raw.githack.com/bioFAM/MOFA2_tutorials/master/R_tutorials/CLL.html&#34;&gt;tutorial&lt;/a&gt; accompanying MOFA2 but focus on what each step does rather than trying to replicate it.&lt;/p&gt;
&lt;p&gt;Using 4 data modalities in CLL_data, the tutorial attempts to identify latent factors capturing variation in mutational, mRNA, methylation and drug response data.&lt;/p&gt;
&lt;p&gt;It first sets up the model and priors using the &lt;code&gt;create_mofa&lt;/code&gt; function. This instantiates zero-centered Gaussian priors on factors and loadings.&lt;/p&gt;
&lt;p&gt;When you call &lt;code&gt;prepare_mofa(..., model_options = model_opts)&lt;/code&gt;, the &lt;code&gt;model_opts&lt;/code&gt; list lets you control the variational inference process and how ELBO is evaluated:&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;model_opts$likelihoods&lt;/code&gt; option tells MOFA2 which probability distribution to assume for each data view when computing the likelihood term in the ELBO.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gaussian: assumes continuous data with additive Normal noise (the default for log-transformed expression, methylation β-values, z-scored proteomics, etc.)&lt;/li&gt;
&lt;li&gt;bernoulli: treats the data as binary presence/absence (e.g. ATAC peak calls).&lt;/li&gt;
&lt;li&gt;poisson: for raw count data (e.g. untransformed RNA-seq counts).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you pick the wrong likelihood (e.g. Gaussian on raw counts), the fit will be poor and the ELBO will not converge appropriately. It is thus important to match each modality’s model_opts$likelihoods to your actual data distribution.&lt;/p&gt;
&lt;p&gt;When you call &lt;code&gt;prepare_mofa(..., training_options = train_opts)&lt;/code&gt;, the &lt;code&gt;train_opts&lt;/code&gt; list lets you control the variational inference process and how ELBO is evaluated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;maxiter&lt;/code&gt;: Maximum number of variational inference iterations. Convergence is assessed via the ELBO statistic. If ELBO hasn’t plateaued by maxiter, you can increase this number to allow more refinement.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;convergence_mode&lt;/code&gt;: Tolerance level for ELBO changes before stopping.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;startELBO&lt;/code&gt;: Iteration at which to compute the first ELBO value (default = 1).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;freqELBO&lt;/code&gt;: How often (in iterations) to record ELBO. Recording every 1 iteration can be slow for large runs—setting freqELBO = 10 or 20 reduces logging overhead.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;drop_factor_threshold&lt;/code&gt;: Threshold on variance explained below which a factor is considered inactive and dropped. A value of 0.01 drops factors explaining &amp;lt; 1% variance; default = –1 disables automatic dropping.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;limitations-of-mofa2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Limitations of MOFA2&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MOFA2 models each view as a linear combination of factors. Thus, it can miss non-linear relationships that deep-learning methods might capture.&lt;/li&gt;
&lt;li&gt;MOFA2 supports only Gaussian, Bernoulli and Poisson likelihoods. If your data violate those assumptions (e.g., heavy tails, zero inflation), fit and factor interpretability can suffer.&lt;/li&gt;
&lt;li&gt;Factors can mix unrelated signals if modalities are imbalanced or correlated, making biological interpretation less clear without careful downstream validation.&lt;/li&gt;
&lt;li&gt;You need to pre-correct batch effects yourself or rely on MOFA2’s noise term, which isn’t always enough for large technical confounders.&lt;/li&gt;
&lt;li&gt;Imbalance in features of different modalities can overshadow the results.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;By aligning your biological question, data characteristics, and interpretability requirements you can choose which tool to select for your multi-omic integration analysis.&lt;/p&gt;
&lt;p&gt;In deeply understanding one such tool &lt;code&gt;MOFA2&lt;/code&gt; we internalized the core of Bayesian/probabilistic integration methods—namely, that they all:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define a generative latent‐variable model (data generated from hidden factors + noise),&lt;/li&gt;
&lt;li&gt;Place priors on factors and loadings to encode sparsity or effect‐size beliefs,&lt;/li&gt;
&lt;li&gt;Choose modality‐specific likelihoods to match data distributions, and&lt;/li&gt;
&lt;li&gt;Use approximate inference (EM, variational inference or VAEs) to recover posteriors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that we understand these four pillars, you can pick up and interpret any related multi-omic tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://biofam.github.io/MOFA2/&#34; class=&#34;uri&#34;&gt;https://biofam.github.io/MOFA2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.embopress.org/doi/full/10.15252/msb.20178124&#34; class=&#34;uri&#34;&gt;https://www.embopress.org/doi/full/10.15252/msb.20178124&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Bioinformatics Careers &amp; Computational Biology</title>
      <link>/talk/2025-u-maryland/</link>
      <pubDate>Tue, 06 May 2025 18:00:00 +0000</pubDate>
      
      <guid>/talk/2025-u-maryland/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/img/u_maryland.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Bioinformatics Computational Biology Association (BCBA) is excited to host Dr. Ming Tommy Tang, Director of Bioinformatics at AstraZeneca and founder of the science blog Diving into Genetics and Genomics.&lt;/p&gt;

&lt;p&gt;Join us on Tuesday, May 6th at 5:30 PM in ILSB 302 for a special career-focused seminar where Dr. Tang will share his journey across academia, biotech, and pharma:&lt;/p&gt;

&lt;p&gt;Earning his PhD in molecular cancer biology at the University of Florida and postdoctoral training at MD Anderson Cancer Center&lt;/p&gt;

&lt;p&gt;Transitioning to non-tenure track faculty roles at Harvard FAS Informatics and Dana-Farber Cancer Institute&lt;/p&gt;

&lt;p&gt;Building and leading the computational biology team at Immunitas Therapeutics, where he applied single-cell RNAseq and TCRseq to study the tumor microenvironment&lt;/p&gt;

&lt;p&gt;His current leadership role at AstraZeneca, heading the epigenetics bioinformatics effort to drive the Epigenetics Oncology portfolio toward the clinic with actionable bioinformatics insights&lt;/p&gt;

&lt;p&gt;His passion for open science, bioinformatics education, and empowering biologists with computational skills&lt;/p&gt;

&lt;p&gt;With over a decade of experience in genomics, epigenomics, and transcriptomics, Dr. Tang brings a wealth of expertise at the intersection of biology and computation.
More about his work can be found at divingintogeneticsandgenomics.com.&lt;/p&gt;

&lt;p&gt;Dr. Tang will also share practical career advice for students interested in biology, bioinformatics, computer science, and STEM fields — especially valuable for juniors, seniors, and students exploring industry careers.&lt;/p&gt;

&lt;p&gt;We highly encourage anyone interested in bioinformatics, genomics, computational biology, or science careers to attend!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring Spatial Transcriptomics A Dive into Visium Data Analysis in Python</title>
      <link>/post/python-visium/</link>
      <pubDate>Sat, 03 May 2025 00:00:00 +0000</pubDate>
      
      <guid>/post/python-visium/</guid>
      <description>

&lt;h2 id=&#34;why-guest-posting&#34;&gt;Why guest posting?&lt;/h2&gt;

&lt;p&gt;I want to write more hands-on tutorials, but I realized:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I am not an expert for every data type.&lt;/li&gt;
&lt;li&gt;I am too busy to write new ones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that&amp;rsquo;s why I started to experiment guest posting!&lt;/p&gt;

&lt;p&gt;If you want to do a guest posting in my blog which gets 30k views per month, feel free to contact me
on &lt;a href=&#34;https://www.linkedin.com/in/%F0%9F%8E%AF-ming-tommy-tang-40650014/&#34; target=&#34;_blank&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I love to collaborate and share knowledge!&lt;/p&gt;

&lt;p&gt;This is the first ever guest blog post in my blog site &lt;a href=&#34;https://divingintogeneticsandgenomics.com/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Chatomics&lt;/code&gt;&lt;/a&gt; by&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Author:&lt;/strong&gt; &lt;a href=&#34;https://www.linkedin.com/in/agalvezm/&#34; target=&#34;_blank&#34;&gt;Angel Galvez Merchan&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Angel was a computational Biologist at Cellarity, leveraging omics data analysis and machine learning to advance drug discovery. PhD in Biology from Caltech, where he studied and developed single-cell genomics tools at Lior Pachter lab and investigated mRNA degradation mechanisms in Rebecca Voorhees lab.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Angel is going to introduce the basics of spatial transcriptomics data analysis with a Visium dataset using Python.&lt;/p&gt;

&lt;p&gt;I love the way how he introduced the spatial data on top of his previous experience with single-cell data and he explains the details in a very accessible way. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;overview-of-spatial-transcriptomics-technologies&#34;&gt;Overview of Spatial Transcriptomics Technologies&lt;/h2&gt;

&lt;p&gt;Spatial transcriptomics is transforming our understanding of tissue biology by enabling researchers to measure gene expression within the spatial context of intact tissues. Unlike traditional single-cell RNA sequencing (scRNA-seq), which dissociates cells and loses spatial information, spatial transcriptomics retains the physical location of gene expression, opening up powerful insights into tissue architecture, cellular niches, and microenvironments in health and disease.&lt;/p&gt;

&lt;p&gt;Several technologies have emerged in recent years, each with distinct approaches, strengths, and trade-offs:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Technology&lt;/th&gt;
&lt;th&gt;Origin / Platform&lt;/th&gt;
&lt;th&gt;Resolution&lt;/th&gt;
&lt;th&gt;Approach&lt;/th&gt;
&lt;th&gt;Unique Features &amp;amp; Notes&lt;/th&gt;
&lt;th&gt;Use Case Fit&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;10x Visium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;10x Genomics (2019)&lt;/td&gt;
&lt;td&gt;~55 µm (multi-cell)&lt;/td&gt;
&lt;td&gt;Slide-based capture on barcoded spots&lt;/td&gt;
&lt;td&gt;Mature ecosystem; open-source-friendly&lt;/td&gt;
&lt;td&gt;General-purpose profiling&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Visium HD&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;10x Genomics (2024)&lt;/td&gt;
&lt;td&gt;2 µm (single cell-scale)&lt;/td&gt;
&lt;td&gt;Slide-based, barcoded grid (probe-based)&lt;/td&gt;
&lt;td&gt;Continuous 2x2 µm grid; FFPE/fresh/fixed frozen compatible; CytAssist workflow; high sensitivity; probe panels&lt;/td&gt;
&lt;td&gt;Single cell-scale, high-res profiling&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Slide-seq / V2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Macosko Lab, Harvard (2019-2020)&lt;/td&gt;
&lt;td&gt;~10 µm (near single-cell)&lt;/td&gt;
&lt;td&gt;Barcoded beads on slide&lt;/td&gt;
&lt;td&gt;Higher spatial resolution; complex bead registration&lt;/td&gt;
&lt;td&gt;Fine-grained spatial detail&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;MERFISH / seqFISH&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Zhuang Lab / Raj Lab (2015-2021)&lt;/td&gt;
&lt;td&gt;Subcellular&lt;/td&gt;
&lt;td&gt;Multiplexed in situ hybridization&lt;/td&gt;
&lt;td&gt;Single-molecule precision; targeted gene panels&lt;/td&gt;
&lt;td&gt;Subcellular mapping&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Vizgen (MERFISH)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Vizgen (2021)&lt;/td&gt;
&lt;td&gt;Subcellular (single-molecule)&lt;/td&gt;
&lt;td&gt;Imaging-based, multiplexed FISH&lt;/td&gt;
&lt;td&gt;Commercialized MERFISH; high multiplexing; single-molecule detection; robust error correction&lt;/td&gt;
&lt;td&gt;Single-molecule, subcellular mapping&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GeoMx / CosMx&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;NanoString (2020-2022)&lt;/td&gt;
&lt;td&gt;CosMx: single-cell&lt;br&gt;GeoMx: low&lt;/td&gt;
&lt;td&gt;Barcoded ROI-based probe hybridization&lt;/td&gt;
&lt;td&gt;Flexible RNA/protein profiling; strong FFPE support&lt;/td&gt;
&lt;td&gt;Targeted profiling in clinical&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Stereo-seq&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;BGI Genomics (2021)&lt;/td&gt;
&lt;td&gt;~0.5 µm (subcellular)&lt;/td&gt;
&lt;td&gt;DNA nanoball arrays&lt;/td&gt;
&lt;td&gt;Ultra-high resolution; high data volume&lt;/td&gt;
&lt;td&gt;Ultra-high-res spatial mapping&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Xenium&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;10x Genomics (2023)&lt;/td&gt;
&lt;td&gt;Single-cell (subcellular post-segmentation)&lt;/td&gt;
&lt;td&gt;Imaging-based in situ hybridization&lt;/td&gt;
&lt;td&gt;High-plex RNA panels (up to 5,000 genes); padlock probe/rolling circle amplification; fast, robust imaging&lt;/td&gt;
&lt;td&gt;Targeted, high-plex single-cell spatial&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;why-focus-on-visium&#34;&gt;Why Focus on Visium?&lt;/h2&gt;

&lt;p&gt;In this blog post, we will focus on &lt;strong&gt;10x Genomics Visium&lt;/strong&gt; because it provides a particularly smooth transition into spatial transcriptomics for those already familiar with scRNA-seq. Its data structure and analysis workflow align closely with standard scRNA-seq practices, allowing researchers to reuse tools like &lt;code&gt;scanpy&lt;/code&gt; and &lt;code&gt;anndata&lt;/code&gt; with minimal adaptation. Combined with a robust commercial ecosystem, standardized outputs, and strong community support, Visium is an ideal starting point for single-cell experts looking to explore spatial context.&lt;/p&gt;

&lt;p&gt;In fact, this was how I personally began exploring spatial transcriptomics: by extending familiar scRNA-seq workflows into spatial data, and gradually discovering the rich new layers it adds to biological interpretation. I hope this approach helps you make the transition as smooth and enjoyable as it did for me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link to Google Colab:&lt;/strong&gt; &lt;a href=&#34;https://colab.research.google.com/drive/1nrnBi1LsigG3YEDEJTg5xGwq6c3ye4X3?usp=sharing&#34; target=&#34;_blank&#34;&gt;https://colab.research.google.com/drive/1nrnBi1LsigG3YEDEJTg5xGwq6c3ye4X3?usp=sharing&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;imports-and-installs&#34;&gt;Imports and installs&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%capture

# Installs
!pip3 install igraph leidenalg scanpy squidpy anndata plotly

# Imports
import scanpy as sc
import squidpy as sq
import anndata
import os
import tarfile
import requests
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;read-data&#34;&gt;Read data&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s kick things off by loading a real Visium dataset. For this tutorial, we will use the &amp;ldquo;V1_Human_Lymph_Node&amp;rdquo; sample provided by 10x Genomics, which is conveniently available through &lt;code&gt;scanpy&lt;/code&gt; built-in datasets module.&lt;/p&gt;

&lt;p&gt;This dataset comes from a human lymph node section and includes gene expression data, spatial coordinates, and a histology image.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;adata = sc.datasets.visium_sge(sample_id=&amp;quot;V1_Human_Lymph_Node&amp;quot;)
adata.var_names_make_unique()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ipython-input-2-3408fd5b9ba4&amp;gt;:1: FutureWarning: Use `squidpy.datasets.visium` instead.
  adata = sc.datasets.visium_sge(sample_id=&amp;quot;V1_Human_Lymph_Node&amp;quot;)



  0%|          | 0.00/7.86M [00:00&amp;lt;?, ?B/s]



  0%|          | 0.00/29.3M [00:00&amp;lt;?, ?B/s]


/usr/local/lib/python3.11/dist-packages/scanpy/datasets/_datasets.py:555: FutureWarning: Use `squidpy.read.visium` instead.
  return read_visium(sample_dir, source_image_path=source_image_path)
/usr/local/lib/python3.11/dist-packages/anndata/_core/anndata.py:1758: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.
  utils.warn_names_duplicates(&amp;quot;var&amp;quot;)
/usr/local/lib/python3.11/dist-packages/anndata/_core/anndata.py:1758: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.
  utils.warn_names_duplicates(&amp;quot;var&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;understanding-the-visium-data-structure&#34;&gt;Understanding the Visium data structure&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s inspect the adata object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;adata
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;AnnData object with n_obs Ã— n_vars = 4035 Ã— 36601
    obs: &#39;in_tissue&#39;, &#39;array_row&#39;, &#39;array_col&#39;
    var: &#39;gene_ids&#39;, &#39;feature_types&#39;, &#39;genome&#39;
    uns: &#39;spatial&#39;
    obsm: &#39;spatial&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first glance, the Visium dataset looks a lot like a standard scRNA-seq dataset. And that is because they share the same foundation: a &lt;strong&gt;gene count matrix&lt;/strong&gt;, with genes as rows and observations (in this case, spatial spots) as columns.&lt;/p&gt;

&lt;p&gt;But Visium adds &lt;strong&gt;two extra layers&lt;/strong&gt; of spatial context:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Coordinates&lt;/strong&gt; Each spot on the slide is associated with spatial (x, y) coordinates, enabling us to map gene expression back onto tissue morphology.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tissue Image&lt;/strong&gt;“ Alongside the expression data, Visium includes an image of the tissue section. This makes it possible to overlay gene expression patterns on top of actual histology, bridging morphology and molecular data.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These extra layers turn a familiar data object into something more informative, adding new dimensions that change how we explore and interpret the data.&lt;/p&gt;

&lt;h2 id=&#34;shared-foundation-the-gene-count-matrix&#34;&gt;Shared foundation: the Gene Count Matrix&lt;/h2&gt;

&lt;p&gt;This matrix is functionally very similar to what you would find in scRNA-seq workflows. Each spot (a small region of tissue) acts like a pseudo-cell, and each entry in the matrix represents the expression level of a gene in that spot. Because of this similarity, many pre-processing steps (depth-normalization, log transformation, dimensionality reduction, clustering, etc.) can be performed using the same tools and techniques used for scRNA-seq.&lt;/p&gt;

&lt;h3 id=&#34;qc-metrics&#34;&gt;QC metrics&lt;/h3&gt;

&lt;p&gt;Most QC metrics used in scRNA-seq can be translated to Visium data. We can use the same function in &lt;code&gt;scanpy&lt;/code&gt; to calculate those metrics.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Add annotation for mitochondrial genes
adata.var[&amp;quot;mt&amp;quot;] = adata.var_names.str.startswith(&amp;quot;MT-&amp;quot;)

# Calculate QC metrics
sc.pp.calculate_qc_metrics(adata, qc_vars=[&amp;quot;mt&amp;quot;], inplace=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;filters&#34;&gt;Filters&lt;/h3&gt;

&lt;p&gt;Just like in single cell RNA-seq, it makes sense to filter out spots with very few detected genes, as these are: often low-quality or empty regions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Filter out spots with less than 200 genes
sc.pp.filter_cells(adata, min_genes=200)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;normalization&#34;&gt;Normalization&lt;/h3&gt;

&lt;p&gt;In most scRNA-seq workflows, we perform cell-depth normalization to correct for differences in sequencing depth or capture  efficiency, followed by a log transformation to stabilize variance. However, there is an important caveat:&lt;/p&gt;

&lt;h4 id=&#34;visium-single-cells&#34;&gt;Visium != single cells&lt;/h4&gt;

&lt;p&gt;Although Visium data looks like single-cell data (a gene-by-spot matrix), each spot captures transcripts from a multi-cellular region of the tissue, making it more akin to a series of bulk RNA-seq samples with spatial information.&lt;/p&gt;

&lt;p&gt;That difference matters, especially when thinking about how to normalize the data. In spatial transcriptomics, the total number of transcripts in a spot might actually reflect meaningful biology, like differences in tissue density, cellularity, or metabolic activity.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s visualize the total counts per spot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sq.pl.spatial_scatter(
    adata,
    color=&amp;quot;total_counts&amp;quot;,
    size=1.5
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/figures/figure_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You might notice that total counts show some spatial structure and aren&amp;rsquo;t randomly distributed across the tissue. In some cases, these patterns may align with known tissue morphology, hinting at potential biological relevance. This opens up the possibility that total counts may reflect meaningful differences, like local cell density or transcriptional activity.&lt;/p&gt;

&lt;h4 id=&#34;so-what-should-we-do&#34;&gt;So&amp;hellip; what should we do?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;There is no single best answer right now.&lt;/strong&gt; How to normalize spatial transcriptomics data is still an open question in the field, and different approaches may be better suited for different downstream analyses.&lt;/p&gt;

&lt;p&gt;Sometimes, the spatial structure you see in total counts may reflect real biology, but other times, it could stem from technical artifacts, such as differences in how well certain regions of the slide captured transcripts. Some areas might just perform better than others in terms of RNA capture, leading to apparent &amp;ldquo;hotspots&amp;rdquo; or &amp;ldquo;cold spots&amp;rdquo; that aren&amp;rsquo;t necessarily biologically meaningful.&lt;/p&gt;

&lt;p&gt;For the purpose of this tutorial, we will keep things simple and apply the standard scRNA-seq normalization approach. But it is important to be aware of the assumptions behind this method, and the limitations it brings when working with spatial data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Normalize to 10,000 total counts per spot
sc.pp.normalize_total(adata, target_sum=1e4)

# Log transform the data
sc.pp.log1p(adata)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us a log-normalized expression matrix, similar to what we would use in single-cell workflows. Just keep in mind that we are treating total counts as technical noise, which may not always be true.&lt;/p&gt;

&lt;h3 id=&#34;highly-variable-genes&#34;&gt;Highly variable genes&lt;/h3&gt;

&lt;p&gt;As in scRNA-seq, we can select highly variable genes (HVGs) to focus on the most informative features for downstream analysis:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sc.pp.highly_variable_genes(adata)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Some studies suggest that combining highly variable genes with spatially variable genes can improve cell type clustering performance (see &lt;a href=&#34;https://pmc.ncbi.nlm.nih.gov/articles/PMC11537352/&#34; target=&#34;_blank&#34;&gt;this preprint&lt;/a&gt; for details). For simplicity, we&amp;rsquo;ll stick with standard HVGs here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;dimensionality-reduction-and-visualization&#34;&gt;Dimensionality reduction and visualization&lt;/h3&gt;

&lt;p&gt;You can apply the same dimensionality reduction and visualization pipeline used in scRNA-seq. After normalization and HVG selection, standard steps like PCA, nearest neighbor graph construction, leiden clustering and UMAP can be used to project the data into a low-dimensional space:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Run PCA
sc.pp.pca(adata, n_comps=50)

# Calculate neighbors
sc.pp.neighbors(adata, n_neighbors=10, n_pcs=40)

# Leiden clustering
sc.tl.leiden(adata, resolution=0.8)

# Computing UMAP
sc.tl.umap(adata)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ipython-input-9-4431874b17ef&amp;gt;:8: FutureWarning: In the future, the default backend for leiden will be igraph instead of leidenalg.

 To achieve the future defaults please pass: flavor=&amp;quot;igraph&amp;quot; and n_iterations=2.  directed must also be False to work with igraph&#39;s implementation.
  sc.tl.leiden(adata, resolution=0.8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can try to identify cell types in Visium data using the same approach as in single-cell RNA-seq: by plotting known marker genes. For example, to explore B cell populations, we can visualize expression of a few canonical B cell markers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Visualizing marker genes
sc.pl.umap(adata, color=[&#39;leiden&#39;, &#39;CD19&#39;, &#39;MS4A1&#39;, &#39;FCER2&#39;], cmap = &#39;Reds&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/figures/figure_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This brings us back to the key difference we mentioned earlier: each dot in the UMAP represents a spot, not an individual cell. Unlike in scRNA-seq, we don&amp;rsquo;t always see crisp clusters corresponding to distinct cell types. Instead, marker gene expression often appears broadly distributed, reflecting the fact that many spots likely contain mixtures of cell types. In the case of the lymph node, where B cells are abundant, this result makes sense. It is somewhat expected that most spots contain at least some B cell transcript signal.&lt;/p&gt;

&lt;h2 id=&#34;the-unique-layers-of-spatial-transcriptomics&#34;&gt;The Unique Layers of Spatial Transcriptomics&lt;/h2&gt;

&lt;p&gt;So far, we have worked with the gene count matrix, a structure that closely mirrors scRNA-seq. Now, let&amp;rsquo;s look at what makes spatial transcriptomics different: the additional layers of spatial context.&lt;/p&gt;

&lt;h3 id=&#34;histology-image&#34;&gt;Histology Image&lt;/h3&gt;

&lt;p&gt;Alongside the gene expression data, Visium also provides a &lt;strong&gt;histology image&lt;/strong&gt; of the tissue section. This image is stored within the &lt;code&gt;adata.uns&lt;/code&gt; dictionary and can be accessed as a standard NumPy array, with pixel values encoded in RGB format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;img = adata.uns[&#39;spatial&#39;][&#39;V1_Human_Lymph_Node&#39;][&#39;images&#39;][&#39;hires&#39;]
print(f&amp;quot;Shape: {img.shape}, Type: {type(img)}, Dtype: {img.dtype}&amp;quot;)

# First top left pixels
img[:3, :3, :]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Shape: (2000, 1921, 3), Type: &amp;lt;class &#39;numpy.ndarray&#39;&amp;gt;, Dtype: float32





array([[[0.5882353 , 0.6       , 0.5764706 ],
        [0.58431375, 0.6       , 0.5686275 ],
        [0.5882353 , 0.6       , 0.5686275 ]],

       [[0.5882353 , 0.6       , 0.57254905],
        [0.5882353 , 0.6       , 0.5764706 ],
        [0.58431375, 0.6       , 0.5764706 ]],

       [[0.58431375, 0.6       , 0.5803922 ],
        [0.58431375, 0.6       , 0.5764706 ],
        [0.58431375, 0.59607846, 0.57254905]]], dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can visualize the tissue image using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sq.pl.spatial_scatter(adata)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/figures/figure_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;calculating-features-in-image&#34;&gt;Calculating features in image&lt;/h4&gt;

&lt;p&gt;Tissue images can contain one or more channels. For example, fluorescence-based data might include separate channels for different markers. Even in standard histology images like H&amp;amp;E, we can extract useful information by calculating image-based features.&lt;/p&gt;

&lt;p&gt;These features might include pixel intensity, texture, or structural patterns associated with different tissue regions or staining types. While in this example the image isn&amp;rsquo;t rich in contrast and has no multi-channel content, we willll still use it to demonstrate how image features can be extracted and used in spatial analyses.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define image container
img = sq.im.ImageContainer.from_adata(adata)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;squidpy&lt;/code&gt;&amp;rsquo;s &lt;code&gt;calculate_image_features&lt;/code&gt; function, when used with the default option (&lt;code&gt;features=&amp;quot;summary&amp;quot;&lt;/code&gt;), computes a set of basic image features for each spot, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mean intensity&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Standard deviation&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Quantiles (e.g., median, 10th/90th percentiles)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Texture features&lt;/li&gt;
&lt;li&gt;Edge features (like edge density using Sobel filters)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These features are computed using a &lt;strong&gt;circular region around each spot&lt;/strong&gt; on the tissue image, providing a local summary of the image content beneath each capture area.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sq.im.calculate_image_features(
    adata,
    img,
    features=&amp;quot;summary&amp;quot;,
    key_added=&amp;quot;image_features&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  0%|          | 0/4032 [00:00&amp;lt;?, ?/s]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Transfer to obs for plotting
adata.obs[&amp;quot;summary_ch-0_mean&amp;quot;] = adata.obsm[&amp;quot;image_features&amp;quot;][&amp;quot;summary_ch-0_mean&amp;quot;]
sq.pl.spatial_scatter(
    adata,
    color=&amp;quot;summary_ch-0_mean&amp;quot;,
    size=1.5
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/figures/figure_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This plot represents the mean pixel intensity from the image under each spot, giving us a rough idea of local brightness across the tissue.&lt;/p&gt;

&lt;h4 id=&#34;clustering-on-image-features&#34;&gt;Clustering on image features&lt;/h4&gt;

&lt;p&gt;Since the image features are numerical values (just like gene expression), we can use them for clustering. This allows us to group spots based on similarities in their local tissue appearance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sc.pp.neighbors(adata, use_rep=&amp;quot;image_features&amp;quot;)
sc.tl.leiden(adata, key_added=&amp;quot;image_features_clusters&amp;quot;, resolution = 0.1)

#adata.uns.pop(&#39;image_features_clusters_colors&#39;)
sq.pl.spatial_scatter(
    adata,
    color=&amp;quot;image_features_clusters&amp;quot;,
    size=1.5
)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/figures/figure_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;spatial-coordinates&#34;&gt;Spatial Coordinates&lt;/h3&gt;

&lt;p&gt;Each spot in Visium data comes with associated &lt;strong&gt;(x, y) coordinates&lt;/strong&gt; that indicate its physical location on the tissue slide. These spatial coordinates allow us to map gene expression data back onto the tissue&amp;rsquo;s layout.&lt;/p&gt;

&lt;p&gt;You can access them in &lt;code&gt;adata.obsm&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Extracting spatial coordinates
coords = adata.obsm[&amp;quot;spatial&amp;quot;]
print(f&amp;quot;Shape: {coords.shape}, Type: {type(coords)}, Dtype: {coords.dtype}&amp;quot;)

# First few coordinates
coords[:3, :]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Shape: (4032, 2), Type: &amp;lt;class &#39;numpy.ndarray&#39;&amp;gt;, Dtype: int64





array([[8346, 6982],
       [4270, 1363],
       [2635, 8074]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This returns an array with the x and y positions (in pixels) for each spot on the slide.&lt;/p&gt;

&lt;h3 id=&#34;building-a-spatial-neighborhood-graph&#34;&gt;Building a Spatial Neighborhood Graph&lt;/h3&gt;

&lt;p&gt;To incorporate spatial relationships into our analysis, we can build a &lt;strong&gt;spatial neighborhood graph&lt;/strong&gt;. This graph defines which spots are considered neighbors based on their physical proximity on the slide.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;squidpy&lt;/code&gt;, this is easily done using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sq.gr.spatial_neighbors(adata, coord_type=&amp;quot;grid&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resulting graph is stored in &lt;code&gt;adata.obsp[&amp;quot;spatial_connectivities&amp;quot;]&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;adata.obsp[&amp;quot;spatial_connectivities&amp;quot;].shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(4032, 4032)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also visualize the graph to see how spots are linked together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sq.pl.spatial_scatter(adata, connectivity_key=&amp;quot;spatial_connectivities&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/figures/figure_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;integrating-the-layers-of-spatial-transcriptomics&#34;&gt;Integrating the Layers of Spatial Transcriptomics&lt;/h2&gt;

&lt;p&gt;So far, we&amp;rsquo;ve explored the core components of spatial transcriptomics: the gene count matrix, the histology image, and the spatial coordinates. Each of these layers is valuable on its own, but the real power of spatial transcriptomics emerges when we &lt;strong&gt;combine them&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By integrating gene expression with spatial context and image-derived features, we can uncover patterns that would be invisible in standard scRNA-seq. This is where spatial transcriptomics moves beyond simply measuring gene expression. It starts to reveal how cells are organized, how they interact, and how structure relates to function.&lt;/p&gt;

&lt;p&gt;In the following sections, we will explore a few ways to combine these layers for spatially aware analysis.&lt;/p&gt;

&lt;h3 id=&#34;gene-expression-features-observed-on-tissue&#34;&gt;Gene expression features observed on tissue&lt;/h3&gt;

&lt;p&gt;One of the most powerful aspects of spatial transcriptomics is the ability to visualize gene expression directly on the tissue. This allows us to observe how specific genes are spatially distributed and how they relate to tissue structure.&lt;/p&gt;

&lt;p&gt;For example, we can visualize expression of the T cell marker CD3E:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sq.pl.spatial_scatter(adata, color = &#39;CD3E&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/figures/figure_7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that CD3E expression is broadly distributed across the tissue, with some localized areas of higher expression. This pattern likely reflects regions with enriched T cell presence.&lt;/p&gt;

&lt;h3 id=&#34;spatial-mapping-of-gene-expression-clusters&#34;&gt;Spatial Mapping of Gene Expression Clusters&lt;/h3&gt;

&lt;p&gt;We can visualize the Leiden clusters &lt;strong&gt;computed from the gene expression data&lt;/strong&gt; directly on the tissue. This
allows us to see whether spots that are transcriptionally similar are also spatially close to one another and whether distinct expression programs correspond to specific tissue regions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sq.pl.spatial_scatter(adata, color = &#39;leiden&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/figures/figure_8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cluster 9 stands out as a spatially localized group of spots. To understand what characterizes this cluster, we can examine its marker genes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sc.tl.rank_genes_groups(adata, &#39;leiden&#39;)
sc.pl.rank_genes_groups(adata, n_genes=25, groups = [&#39;9&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/figures/figure_9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The results indicate that cluster 9 is enriched for interferon-induced genes, suggesting that this region of the tissue is actively responding to interferon signaling. To further support this, we can visualize the expression of additional known interferon-stimulated genes that were not among the top-ranked markers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sq.pl.spatial_scatter(adata, color = [&#39;OAS1&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/figures/figure_10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;finding-spatially-variable-genes&#34;&gt;Finding Spatially Variable Genes&lt;/h3&gt;

&lt;p&gt;In addition to identifying genes that vary across transcriptional clusters, we can also look for genes that show &lt;strong&gt;spatial structure&lt;/strong&gt;, that is, genes whose expression levels are &lt;strong&gt;non-randomly distributed across the tissue&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;One way to quantify this is with &lt;strong&gt;Moran&amp;rsquo;s I&lt;/strong&gt;, a measure of spatial autocorrelation. Genes with high Moran&amp;rsquo;s I values tend to be expressed in spatially coherent patterns, rather than scattered randomly across spots.&lt;/p&gt;

&lt;p&gt;We can compute this using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sq.gr.spatial_autocorr(adata, mode=&amp;quot;moran&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this functions uses the spatial neighborhood graph that we computed in previous sections. We can check the top spatially structured genes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Top spatially structured genes
adata.uns[&amp;quot;moranI&amp;quot;][&amp;quot;I&amp;quot;].sort_values(ascending = False)[0:15]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;I&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;FDCSP&lt;/th&gt;
      &lt;td&gt;0.701889&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IGHG2&lt;/th&gt;
      &lt;td&gt;0.656459&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MT-CO1&lt;/th&gt;
      &lt;td&gt;0.609527&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CR2&lt;/th&gt;
      &lt;td&gt;0.598975&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MT-CO2&lt;/th&gt;
      &lt;td&gt;0.586977&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CXCL13&lt;/th&gt;
      &lt;td&gt;0.546026&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MT-ND4&lt;/th&gt;
      &lt;td&gt;0.538226&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CLU&lt;/th&gt;
      &lt;td&gt;0.526424&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MT-ND3&lt;/th&gt;
      &lt;td&gt;0.518973&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MT-ATP6&lt;/th&gt;
      &lt;td&gt;0.515217&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MT-CYB&lt;/th&gt;
      &lt;td&gt;0.498500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CCL19&lt;/th&gt;
      &lt;td&gt;0.497364&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;JCHAIN&lt;/th&gt;
      &lt;td&gt;0.494780&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IGLC3&lt;/th&gt;
      &lt;td&gt;0.488655&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MT-ND1&lt;/th&gt;
      &lt;td&gt;0.474826&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;br&gt;&lt;label&gt;&lt;b&gt;dtype:&lt;/b&gt; float64&lt;/label&gt;&lt;/p&gt;

&lt;p&gt;And we can visualize some of them, confirming their spatial structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sq.pl.spatial_scatter(adata, color = [&#39;IGKC&#39;,&#39;IGHG2&#39;,&#39;IGHG4&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/figures/figure_11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;segmenting-the-tissue-into-spatial-domains&#34;&gt;Segmenting the Tissue into Spatial Domains&lt;/h3&gt;

&lt;p&gt;A key goal in spatial transcriptomics is to define &lt;strong&gt;tissue regions&lt;/strong&gt; that reflect both molecular identity and physical organization. In contrast to clustering based purely on gene expression, spatial domain identification focuses on grouping spots that are transcriptionally similar and spatially close, capturing functional zones within the tissue.&lt;/p&gt;

&lt;p&gt;There are many sophisticated methods for identifying spatial domains including &lt;a href=&#34;https://www.biorxiv.org/content/10.1101/2023.06.28.546949v2&#34; target=&#34;_blank&#34;&gt;concordex&lt;/a&gt;, &lt;a href=&#34;https://www.nature.com/articles/s41467-022-29439-6&#34; target=&#34;_blank&#34;&gt;STAGATE&lt;/a&gt;, and others. Working with these tools and deeply exploring spatial domain detection could easily be a blog post (or several) on its own.&lt;/p&gt;

&lt;p&gt;For now, we will use a simple but intuitive approach that captures the essence of spatial domain identification. We take the &lt;strong&gt;principal components (PCs)&lt;/strong&gt; from the PCA of the gene count matrix (a compact summary of transcriptional variation) and &lt;strong&gt;concatenate them with the spatial coordinates&lt;/strong&gt; of each spot. This creates a feature space that incorporates both molecular identity and physical location.&lt;/p&gt;

&lt;p&gt;While this method lacks the complexity of more specialized spatial domain tools, it is surprisingly effective at revealing spatially coherent, transcriptionally distinct regions. It also serves as a great way to build intuition about how gene expression and tissue architecture align.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Extract PCA and spatial coordinates
X_pca = adata.obsm[&amp;quot;X_pca&amp;quot;][:, :10]  # use first 10 PCs
X_spatial = adata.obsm[&amp;quot;spatial&amp;quot;]

# Concatenate PCA + spatial into a new matrix
X_combined = np.concatenate([X_pca, X_spatial], axis=1)
adata.obsm[&amp;quot;X_expr_space&amp;quot;] = X_combined

# Build neighbor graph and cluster using the combined features
sc.pp.neighbors(adata, use_rep=&amp;quot;X_expr_space&amp;quot;)
sc.tl.leiden(adata, key_added=&amp;quot;leiden_expr_spatial&amp;quot;, resolution = 0.5)

# Visualize
sq.pl.spatial_scatter(adata, color=&amp;quot;leiden_expr_spatial&amp;quot;, size=1.5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/figures/figure_12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But wait, something looks off. After running clustering on the combined PCA and spatial coordinates, we get a very clean segmentation of the tissue, but the regions look &lt;strong&gt;suspiciously like purely spatial clusters&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If we inspect the input for or combined matrix, we can see the issue:&lt;/p&gt;

&lt;p&gt;The PC values look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(X_pca[0])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[-2.4115074  -0.9721273   1.4502645  -0.91959316 -0.8045143   0.61556464
 -0.4716737   0.47577807 -0.03904063  0.02958526]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But the spatial coordinates are on a completely different scale:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(X_spatial[0])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[8346 6982]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the spatial coordinates have much larger magnitudes, they dominate the clustering, overpowering the transcriptional signal. The result is clustering that is driven almost entirely by physical location.&lt;/p&gt;

&lt;p&gt;To fix this, we simply need to standardize both the PCA and spatial features so they contribute equally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Scale values
scaler_pca = StandardScaler()
X_pca_scaled = scaler_pca.fit_transform(X_pca)

scaler_spatial = StandardScaler()
X_spatial_scaled = scaler_spatial.fit_transform(X_spatial)

# Combine into one matrix
X_combined = np.concatenate([X_pca_scaled, X_spatial_scaled], axis=1)
adata.obsm[&amp;quot;X_expr_spatial_scaled&amp;quot;] = X_combined

# Neighbors + clustering
sc.pp.neighbors(adata, use_rep=&amp;quot;X_expr_spatial_scaled&amp;quot;)
sc.tl.leiden(adata, key_added=&amp;quot;leiden_expr_spatial_scaled&amp;quot;, resolution = 0.5)

# Visualize
sq.pl.spatial_scatter(adata, color=&amp;quot;leiden_expr_spatial_scaled&amp;quot;, size=1.5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/figures/figure_13.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We now get regions that reflect a balance of spatial coherence and transcriptional similarity, a much more meaningful segmentation of the tissue&lt;/p&gt;

&lt;p&gt;Here is a question for you: &lt;strong&gt;What happens if you use 20 principal components instead of 10?&lt;/strong&gt;  What do you think might change?&lt;/p&gt;

&lt;p&gt;I will leave this as an exercise for the reader. Take a moment to guess before running the code below!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X_pca = adata.obsm[&amp;quot;X_pca&amp;quot;][:, :20]  # use first 20 PCs
X_spatial = adata.obsm[&amp;quot;spatial&amp;quot;]

scaler_pca = StandardScaler()
X_pca_scaled = scaler_pca.fit_transform(X_pca)

scaler_spatial = StandardScaler()
X_spatial_scaled = scaler_spatial.fit_transform(X_spatial)

X_combined = np.concatenate([X_pca_scaled, X_spatial_scaled], axis=1)
adata.obsm[&amp;quot;X_expr_spatial_scaled&amp;quot;] = X_combined

sc.pp.neighbors(adata, use_rep=&amp;quot;X_expr_spatial_scaled&amp;quot;)
sc.tl.leiden(adata, key_added=&amp;quot;leiden_expr_spatial_scaled&amp;quot;, resolution = 0.5)

sq.pl.spatial_scatter(adata, color=&amp;quot;leiden_expr_spatial_scaled&amp;quot;, size=1.5)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;In this tutorial, we explored the foundational concepts of spatial transcriptomics using 10x Visium data, with a perspective rooted in scRNA-seq workflows. Beginning with the familiar gene count matrix, we examined how spatial data builds on this structure by introducing additional layers, such as spatial coordinates and histology images.&lt;/p&gt;

&lt;p&gt;This tutorial serves as an entry point into the field. While there is much more to explore (from spatial domain modeling, to cell-cell interaction analysis) we hope it has provided a solid foundation and demonstrated how spatial transcriptomics extends naturally from single-cell analysis, while offering entirely new opportunities for discovery.&lt;/p&gt;

&lt;p&gt;Happy exploring!&lt;/p&gt;

&lt;h2 id=&#34;notes-from-tommy&#34;&gt;Notes from Tommy&lt;/h2&gt;

&lt;p&gt;We developed &lt;a href=&#34;https://monkeybread.readthedocs.io/en/latest/index.html&#34; target=&#34;_blank&#34;&gt;https://monkeybread.readthedocs.io/en/latest/index.html&lt;/a&gt; when I was at Immunitas, and we use a counts table of the cell type counts around each cell within 50um, and cluster that matrix to find cellular niches and we heard good words from users.&lt;/p&gt;

&lt;p&gt;Tutorial here &lt;a href=&#34;https://monkeybread.readthedocs.io/en/latest/notebooks/tutorial.html&#34; target=&#34;_blank&#34;&gt;https://monkeybread.readthedocs.io/en/latest/notebooks/tutorial.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PCA and CCA for single-cell annotation</title>
      <link>/talk/2025-pythia-cell-anno/</link>
      <pubDate>Thu, 24 Apr 2025 11:00:00 +0000</pubDate>
      
      <guid>/talk/2025-pythia-cell-anno/</guid>
      <description>&lt;p&gt;The hands-on tutorial is at &lt;a href=&#34;https://crazyhottommy.github.io/single-cell-RNAseq-PCA-CCA-cell-annotation/&#34; target=&#34;_blank&#34;&gt;https://crazyhottommy.github.io/single-cell-RNAseq-PCA-CCA-cell-annotation/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/pythia_single_cell_anno.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Breaking into Bioinformatics: practical skills and strategies to stand out</title>
      <link>/talk/2025-stanford/</link>
      <pubDate>Wed, 12 Mar 2025 12:00:00 +0000</pubDate>
      
      <guid>/talk/2025-stanford/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/img/stanford_talk.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
